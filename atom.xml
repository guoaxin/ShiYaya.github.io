<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShiYaya</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-02T13:51:40.392Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ShiYaya</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weakly-Supervised Spatio-Temporally Grounding Natural Sentence in Video</title>
    <link href="http://yoursite.com/2019/12/02/Weakly-Supervised-Spatio-Temporally-Grounding-Natural-Sentence-in-Video/"/>
    <id>http://yoursite.com/2019/12/02/Weakly-Supervised-Spatio-Temporally-Grounding-Natural-Sentence-in-Video/</id>
    <published>2019-12-02T03:36:02.000Z</published>
    <updated>2019-12-02T13:51:40.392Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>ACL 2019</strong></li></ul><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><ul><li><p>image grounding取得了很大的进步，但是将该任务迁移到视频上，需要对视频中的每帧都标注region，这个工程量是巨大的。</p></li><li><p>为了避免这种标注工作的工程量，一些<strong>weakly-supervised</strong> video grouding工作【1】【2】被提出来，他们只提供了video-sentence pairs，没有提供 fine-grained regional annotations。在他们的 video grounding任务中，他们仅仅对名词和代词在 视频的静态帧进行grounding。</p></li><li><p>但是这种 grounding存在问题，比如sentence: A brown and white dog is lying on the grass and then it stands up. 但是帧中出现了多个狗，而我们给出的要搜索的对象仅仅是一个名词： ‘dog’，没有其他更多的信息，来进行更加具体地定位，那么就有可能定位错误。另外只对一张静态帧进行定位，也无法捕捉到object在时域上的动态变化。</p></li><li><p>基于上述的分析，本文提出了一个在video grounding上 weakly-supervised 的新任务：<strong>weakly-supervised spatio-temporally grounding sentence in video (WSSTG).</strong>    </p></li></ul><h3 id="Weakly-supervised-spatio-temporally-grounding-sentence-in-video"><a href="#Weakly-supervised-spatio-temporally-grounding-sentence-in-video" class="headerlink" title="Weakly-supervised spatio-temporally grounding sentence in video"></a>Weakly-supervised spatio-temporally grounding sentence in video</h3><ul><li>Specifically, given a natural sentence and a video, we aim to localize a spatio-temporal tube (i.e., a sequence of bounding boxes) ,（本文中作者将tube 称作 instance）</li><li>yaya: 相比于之前的video-grounding任务，同是 weakly-supervised，但是有两点不同：（1）是句子级别的描述，对要定位的对象的描述更加具体，而不是仅仅是个noun。（2）是要定位出一个 spatial-temporal tube，而不是仅在一张静态帧中定位出一个bbox。</li><li>这两点不同同时带来了优势和挑战</li><li>（1）细节性的描述可以消除歧义，但是如何捕捉句子中的语义并在video中定位出来是一个难题；（2）相比于在静态帧中定位一个bbox, 而是在video中定位一个tube,更能呈现出一个object在时域上的动态。但是，如何利用和建模tube的时空特性以及它们与句子的复杂关系提出了另一个挑战。</li><li>compared with 【2】: different from 【2】，whose text input consists of nouns/pronouns and output is a bounding box in a specific frame, we aim  to ground a natural sentence and output a spatio-temporal tube in the video. </li></ul><h3 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h3><ul><li>提出了一个新任务：weakly-supervised spatio-temporally grounding sentence in video</li><li>针对该任务提出了一个method：提出了一个Attentive interactor利用 tube(instance) 与 sentence之间的细粒度的关系来计算 匹配度；提出了一个diversity loss来加强 reliable instance-sentence pairs 并惩罚 unreliable ones。</li><li>在VID object detection dataset 数据集的基础上，对tube(instance) 增加了description</li></ul><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><ul><li>该任务是 给出一个 a natural sentence query <strong>q</strong> and a video <strong>v</strong> 来定位一个spatial-temporal tube，作者也将这个tube 称作 instance。</li><li>由于是弱监督，因此仅仅只给出 video-sentence pair，细粒度的regional annotations不给出！</li><li>将该任务转为一个 Multiple instance learning problem。给定一个video，首先由instance generator【3】来生成一组instance proposals，然后再根据语义相似性来匹配 natural sentence query 和 instance。  </li></ul><h4 id="Instance-Extraction"><a href="#Instance-Extraction" class="headerlink" title="Instance Extraction"></a>Instance Extraction</h4><ul><li><strong>Instance Generation</strong> ：  先由faster rcnn提取object proposals，假设每帧提取N个proposal ， 然后根据【3】得到N个spatial-temporal tube</li><li><strong>Feature Representation</strong> ：I3D-RGB， I3D-Flow， frame-level RoI pooled feature   </li></ul><h4 id="Attentive-Interactor"><a href="#Attentive-Interactor" class="headerlink" title="Attentive Interactor"></a>Attentive Interactor</h4><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g9io2sodynj30i40hk0v9.jpg" alt="搜狗截图20191202204720.png"></p><ul><li>（1）分别对 sequential visual features 和 sequential textual features 经过LSTM进行编码，LSTM每个step输出的隐层状态作为新的representation，得到新的visual feature 和 sentence representation</li><li>（2）依次以visual feature中的每个隐状态作为查询，以 sentence 所有隐状态作为key 和 value，输入Attention中，则得到了<strong>visual guided sentence feature</strong>。（直观的理解：在给定某一个视觉特征，用attention去分析要关注哪一个word）  </li></ul><h4 id="Matching-Behavior-Characterization"><a href="#Matching-Behavior-Characterization" class="headerlink" title="Matching Behavior Characterization"></a>Matching Behavior Characterization</h4><ul><li>用余弦函数计算 <code>i-th</code> visual feature 和 visual guided sentence features 之间的 匹配度</li><li>对所有的step 加和，则得到instance proposal 与 sentence 之间的匹配度</li></ul><h3 id="Training-Loss"><a href="#Training-Loss" class="headerlink" title="Training Loss"></a>Training Loss</h3><ul><li><p>论文对这里介绍的比较详细，参见论文。</p></li><li><p><strong>ranking loss</strong>： aiming at distinguishing aligned video-sentence pairs from the unaligned ones.  这个损失是希望不匹配的video-sentence之间计算出来的匹配度差一些，比如给网络输入不与该视频对应的句子。</p></li><li><p><strong>novel diversity loss</strong> ：to strengthen the matching behaviors between reliable instance-sentence pairs and penalize the unreliable ones from the aligned video-sentence pair.  这个损失主要是希望对一个video，在计算tube 与 sentence之间的匹配度时，希望不同的 tube之间的差异性（diversity）大一些！</p></li></ul><h3 id="Inference"><a href="#Inference" class="headerlink" title="Inference"></a>Inference</h3><ul><li>一个video 给出了N个 tube proposal，当计算完匹配度之后，选取匹配度最大的那个proposal，然后计算与GT之间的 overlap【4】，若overlap 大于一个阈值，则任务预测正确。</li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>【1】De-An Huang, Shyamal Buch, Lucio Dery, Animesh Garg, Li Fei-Fei, and Juan Carlos Niebles. 2018. <strong>Finding “it”: Weakly-supervised reference-aware visual grounding in instructional videos</strong>. In CVPR. </li><li>【2】Luowei Zhou, Nathan Louis, and Jason J Corso. 2018. <strong>Weakly-supervised video object grounding from text by loss weighting and object interaction</strong>. BMVC. </li><li>【3】Georgia Gkioxari and Jitendra Malik. 2015. <strong>Finding action tubes</strong>. In CVPR, pages 759–768. </li><li>【4】Masataka Yamaguchi, Kuniaki Saito, Yoshitaka Ushiku, and Tatsuya Harada. 2017. <strong>Spatio-temporal person retrieval via natural language queries</strong>. In ICCV. </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ACL 2019&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation
      
    
    </summary>
    
      <category term="Visual Grounding" scheme="http://yoursite.com/categories/Visual-Grounding/"/>
    
    
      <category term="Viusal Grounding" scheme="http://yoursite.com/tags/Viusal-Grounding/"/>
    
  </entry>
  
  <entry>
    <title>Finding It: Weakly-Supervised Reference-Aware Visual Grounding in Instructional Videos</title>
    <link href="http://yoursite.com/2019/12/02/Finding-It-Weakly-Supervised-Reference-Aware-Visual-Grounding-in-Instructional-Videos/"/>
    <id>http://yoursite.com/2019/12/02/Finding-It-Weakly-Supervised-Reference-Aware-Visual-Grounding-in-Instructional-Videos/</id>
    <published>2019-12-02T03:23:38.000Z</published>
    <updated>2019-12-02T03:37:20.039Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Learning to Generate Grounded Visual Captions without Localization Supervision</title>
    <link href="http://yoursite.com/2019/12/01/Learning-to-Generate-Grounded-Visual-Captions-without-Localization-Supervision/"/>
    <id>http://yoursite.com/2019/12/01/Learning-to-Generate-Grounded-Visual-Captions-without-Localization-Supervision/</id>
    <published>2019-12-01T04:15:21.000Z</published>
    <updated>2019-12-01T10:47:20.570Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ICLR-2020-under-view"><a href="#ICLR-2020-under-view" class="headerlink" title="ICLR 2020 under view"></a>ICLR 2020 under view</h3><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><ul><li><p>问题：在captioning 任务中，当前的评价指标并不能很好的反应生成的句子与该视频之间的契合度（Groud），有可能生成的句子只是基于在训练过程中学习到的priors（一种统计特性，而不是基于该视频本身）</p></li><li><p>当前模型对于 groud 这个任务，存在的困难：（1）由于当前的 language model 常使用 attention 机制来关注某一个 region，以此来预测下一个生成的单词。换句话说，就是在不知道将会生成什么单词的情况下，却要先定位region， 另外，一篇论文 [1] 提出，attention机制关注的region与人类所关注的并不一致（2）更难的是：传入 attention网络的是 RNN 的 hidden_state，由于 RNN 的记录历史的特性，这个输入包括的是过去所有的信息，而不是针对于某一个individual word。  </p></li></ul><h3 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h3><ul><li>不同于 GVD，该文不使用 annotation bbox 作为监督信号，而是使用了 decoder + localizer + redecoder的结构来自我监督（self-supervision）</li><li>由于其自监督的特性，在一些infrequent word上该文的方法比监督的方法，效果更好</li><li>不仅使用一般的为每个 object class 计算 grounding accuracy， 还提出了一个新的指标：为每个sentence 计算grounding accuracy。</li></ul><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><ul><li><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g9heo6n8glj318k0lp0ze.jpg" alt="搜狗截图20191201183637.png"></p></li><li><p><strong>分阶段训练</strong></p></li><li><p>（1）正常的 encoder-decoder先训练 ~30个epoch</p></li><li><p>（2）在正常的基础上进行添加。 （a）<strong>re-localize</strong>: language_lstm 会得到y1, y2, …, yT 个预测的序列，将这些序列作为attention机制中的 查询向量，赋给每个region一个attention系数，这样就可以在每一个step重构attention系数分配，这样也解决了motivation中提到的问题，即attention是由某一个individual word 而计算得来的。（b）每个step 有了attention对齐之后的attention_region， 再输入到language_LSTM中，得到<strong>再次预测的sequence of word</strong>。</p></li><li><p>在这第二阶段，就是两个loss 交叉熵损失进行权重加和来训练</p></li><li><p>可以发现一个问题，对于visual-words 和 non-visual-words都进行了re-localize。实际上对于，on a 等这类词汇，并不需要在image中找到 grounded region。 该文作者在补充材料里给出了一些额外的实验， eg, 将这些non-visual words 进行抑制，不计算reconstruction loss, 或者给这些localized region representation重新赋给invalid representaion。但是实验表明，在Flickr30 上性能（caption and ground）有提升，但是在 activity上（caption 没变化，ground下降）。</p></li><li><p>但是作者并没有给出分析，我个人总觉得实验设计的不完善，分析的也不多。</p></li></ul><h3 id="Measuring-grounding-per-generated-sentence"><a href="#Measuring-grounding-per-generated-sentence" class="headerlink" title="Measuring grounding per generated sentence"></a>Measuring grounding per generated sentence</h3><ul><li>提该指标的原因：（Such metrics （F1all, F1loc） are extremely stringent as captioning models are generally biased toward certain words in the vocabulary, given the long-tailed distribution of words. ）</li></ul><h3 id="Analysis-Grounding-performance-when-using-a-better-object-detector"><a href="#Analysis-Grounding-performance-when-using-a-better-object-detector" class="headerlink" title="Analysis:  Grounding performance when using a better object detector."></a>Analysis:  Grounding performance when using a better object detector.</h3><ul><li>在 Flickr30k Entities 上进行实验，分析 better detector 对 grounding性能的影响</li><li>（1）使用 GT box (ubrealistically) ，进行实验，发现 caption metric 和 grounding accuracy都有提升</li><li>（2）在 Flickr30k上训练一个detector（之前使用的是在 visual genome上训练好的），进行实验，发现，使得caption metirc下降，（作者分析：由于在本数据集上进行训练，得到的 the ROI features and their associated object predictions 更偏向于 该数据中的  the annotated object words 却不能很好地泛化以预测 diverse captions， 从而导致了captioning 指标下降）</li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>[1] Abhishek Das, Harsh Agrawal, Larry Zitnick, Devi Parikh, and Dhruv Batra.  <strong>Human attention in visual question answering: Do humans and deep networks look at the same regions?</strong>  Computer Vision and Image Understanding, 163:90–100, 2017. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ICLR-2020-under-view&quot;&gt;&lt;a href=&quot;#ICLR-2020-under-view&quot; class=&quot;headerlink&quot; title=&quot;ICLR 2020 under view&quot;&gt;&lt;/a&gt;ICLR 2020 under view&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>vatex_challenge_solutions</title>
    <link href="http://yoursite.com/2019/10/20/vatex-challenge-solutions/"/>
    <id>http://yoursite.com/2019/10/20/vatex-challenge-solutions/</id>
    <published>2019-10-20T09:47:35.000Z</published>
    <updated>2019-10-23T09:11:10.234Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>pytorch 索引 切片</title>
    <link href="http://yoursite.com/2019/10/10/pytorch-%E7%B4%A2%E5%BC%95-%E5%88%87%E7%89%87/"/>
    <id>http://yoursite.com/2019/10/10/pytorch-索引-切片/</id>
    <published>2019-10-10T07:57:21.000Z</published>
    <updated>2019-10-10T08:06:42.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="给出：四维张量，三维的索引。根据索引得到张量中对应的数据"><a href="#给出：四维张量，三维的索引。根据索引得到张量中对应的数据" class="headerlink" title="给出：四维张量，三维的索引。根据索引得到张量中对应的数据"></a>给出：四维张量，三维的索引。根据索引得到张量中对应的数据</h2><ul><li><p>四维张量，object_feats.shape = [bs, 28, 5, 1024]。一个video中截取 28帧，每帧提取5个object, 其特征向量维度为1024</p></li><li><p>三维索引，traj_idx.shape = [bs, 28, 5]。以第一帧 frame上的 5个object 作为anchor，找到以该anchor 作为开头的轨迹（即，在其余帧上的对应的objects的索引），</p></li><li><p>目标：由索引，提取对应的 object feature</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traj_feats = object_feats.gather(<span class="number">2</span>, traj_idx.unsqueeze(<span class="number">3</span>).expand_as(object_feats))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;给出：四维张量，三维的索引。根据索引得到张量中对应的数据&quot;&gt;&lt;a href=&quot;#给出：四维张量，三维的索引。根据索引得到张量中对应的数据&quot; class=&quot;headerlink&quot; title=&quot;给出：四维张量，三维的索引。根据索引得到张量中对应的数据&quot;&gt;&lt;/a&gt;给出
      
    
    </summary>
    
      <category term="pytorch" scheme="http://yoursite.com/categories/pytorch/"/>
    
    
      <category term="pytorch" scheme="http://yoursite.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>使用 objects position 作为特征的论文</title>
    <link href="http://yoursite.com/2019/10/10/%E4%BD%BF%E7%94%A8-objects-position-%E4%BD%9C%E4%B8%BA%E7%89%B9%E5%BE%81%E7%9A%84%E8%AE%BA%E6%96%87/"/>
    <id>http://yoursite.com/2019/10/10/使用-objects-position-作为特征的论文/</id>
    <published>2019-10-10T02:10:41.000Z</published>
    <updated>2019-10-10T02:25:11.330Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>对分类损失的优化</title>
    <link href="http://yoursite.com/2019/09/23/%E5%AF%B9%E5%88%86%E7%B1%BB%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2019/09/23/对分类损失函数的优化/</id>
    <published>2019-09-23T14:13:58.000Z</published>
    <updated>2019-09-23T14:13:58.675Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>视频描述评价指标的分析</title>
    <link href="http://yoursite.com/2019/09/21/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%E7%9A%84%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/09/21/视频描述评价指标的分析/</id>
    <published>2019-09-21T08:50:01.000Z</published>
    <updated>2019-09-22T03:04:49.546Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>Neural Motifs: Scene Graph Parsing with Global Context</title>
    <link href="http://yoursite.com/2019/09/18/Neural-Motifs-Scene-Graph-Parsing-with-Global-Context/"/>
    <id>http://yoursite.com/2019/09/18/Neural-Motifs-Scene-Graph-Parsing-with-Global-Context/</id>
    <published>2019-09-18T06:41:36.000Z</published>
    <updated>2019-09-19T06:51:05.187Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><ul><li>给出了一个对 repeated structures 的量化分析</li><li>分析显示，（1）由object label对预测 relation label是有效的，但是反之却不成立。（2）在一个image graph中会出现重复的模板（eg：大象有耳朵，大象有鼻子，  XX has YY）</li></ul><h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><ul><li>给定 object feature 和 object label 来去预测 relation label</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给出了一个对 repeated structures 的量化分析
      
    
    </summary>
    
      <category term="场景图解析" scheme="http://yoursite.com/categories/%E5%9C%BA%E6%99%AF%E5%9B%BE%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="场景图解析" scheme="http://yoursite.com/tags/%E5%9C%BA%E6%99%AF%E5%9B%BE%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>video captioning 任务的难点？</title>
    <link href="http://yoursite.com/2019/09/07/video-captioning-%E4%BB%BB%E5%8A%A1%E7%9A%84%E9%9A%BE%E7%82%B9%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/09/07/video-captioning-任务的难点？/</id>
    <published>2019-09-07T06:59:20.000Z</published>
    <updated>2019-09-21T08:48:23.866Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>视频描述任务中用到objects的论文总结</title>
    <link href="http://yoursite.com/2019/09/01/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0%E4%BB%BB%E5%8A%A1%E4%B8%AD%E7%94%A8%E5%88%B0objects%E7%9A%84%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/09/01/视频描述任务中用到objects的论文总结/</id>
    <published>2019-09-01T13:44:12.000Z</published>
    <updated>2019-09-02T14:25:17.670Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>CVPR 2018</p><ol><li>Fine-grained Video Captioning for Sports Narrative</li></ol></li><li><p>CVPR 2019</p><ol><li>Grounded Video Description</li><li>Object-aware Aggregation with Bidirectional Temporal Graph for Video Captioning</li><li>Spatio-Temporal Dynamics and Semantic Attribute Enriched Visual Encoding for Video Captioning 【再去读一遍】</li><li>Adversarial Inference for Multi-Sentence Video Description</li></ol></li><li><p>ACM 2019</p><ol><li>Hierarchical Global-Local Temporal Modeling for Video Captioning</li></ol></li></ul><h3 id="Grounded-Video-Description"><a href="#Grounded-Video-Description" class="headerlink" title="Grounded Video Description"></a>Grounded Video Description</h3><p><img src="https://i.loli.net/2019/09/02/Hvtk4BJVNQ2WwdM.png" alt="搜狗截图20190902104324.png"></p><ol><li><p>如何使用region feature？</p><p> 仅在language lstm 用到了 region featrue, attention 加权求和之后 与 cat[ fc, motion] features 对应元素相加（cat[fc, motion]也是在经过attention加权求和之后的）</p><p> 但我个人认为对应元素相加，并没有道理，相当于在 cat[ fc, motion] 的基础上增加了一个 bias，没有什么道理</p></li><li><p>region feature 的构成？</p><p>R：是 object detector  在 fc6 输出的 feature</p><p>Ms(R)：是 object detector 在 fc7 输出的feature (这里有一些细节的修改，具体见论文)</p><p>Ml： 是 position embedding</p></li></ol><p><img src="https://i.loli.net/2019/09/02/y4JkxlmLQpqaj5c.png" alt="搜狗截图20190902105022.png"></p><h3 id="Object-aware-Aggregation-with-Bidirectional-Temporal-Graph-for-Video-Captioning"><a href="#Object-aware-Aggregation-with-Bidirectional-Temporal-Graph-for-Video-Captioning" class="headerlink" title="Object-aware Aggregation with Bidirectional Temporal Graph for Video Captioning"></a>Object-aware Aggregation with Bidirectional Temporal Graph for Video Captioning</h3><p><img src="https://i.loli.net/2019/09/02/TIP7Ww3FnLNKzvu.png" alt="搜狗截图20190902144125.png"></p><ol><li><p>简要介绍本文的结构</p><p> 在encoder 部分，使用 object feature 和 frame feature，分别经过设计的VALD 得到更新的特征向量</p><p> 在 decoder 部分，对object feature 使用两层的attention, 先对 <strong>一个轨迹</strong>上的objects 进行attention 的加权求和，再对N different objects instances进行 attention 的加权求和，这样就可以得到对所有objects 的聚合表达</p><p> 轨迹：对于第一帧的ojects, 根据相似性分别去找其他帧与其对应的objects，而构成的时域轨迹。</p><p>  这里采用了前向轨迹，和后向轨迹两种，在decoder 输出预测的单词之后，进行融合。</p></li><li><p>如何使用region feature？<br> 仅有一个lstm ，在输入lstm前对objects features进行两层attention 加权求和后，与同样经过attention的frames feature进行加和（sum）。<br> 本文没有使用 motion feeture</p></li><li><p>region feature 的构成？<br> 非常简单，只有 appearance feature，但是经过了 obejct VLAD module！</p></li><li><p><font color="#0099ff" size="5" face="黑体">object feature 的 hierarchical attention 值得借鉴呢！<br>计算object 相似性的部分也不错</font></p></li></ol><h3 id="Spatio-Temporal-Dynamics-and-Semantic-Attribute-Enriched-Visual-Encoding-for-Video-Captioning"><a href="#Spatio-Temporal-Dynamics-and-Semantic-Attribute-Enriched-Visual-Encoding-for-Video-Captioning" class="headerlink" title="Spatio-Temporal Dynamics and Semantic Attribute Enriched Visual Encoding for Video Captioning"></a>Spatio-Temporal Dynamics and Semantic Attribute Enriched Visual Encoding for Video Captioning</h3><p><img src="https://i.loli.net/2019/09/02/T5AzpW8DHkVL2Oy.png" alt="搜狗截图20190902152617.png"></p><ul><li>此文没有太看懂</li></ul><ol><li><p>如何使用region feature？</p><p> 得到 obejcts sematics embeddding 一起其他三个信息，经过聚合之后得到特征向量v，再经过一个线性变换得到v，再送入decoder中</p></li><li><p>region feature 的构成？</p><p> 由 object detector 输出的特征，以及其他输出（objetcs 存现的频率、概率），来构建semantics</p></li></ol><h3 id="Hierarchical-Global-Local-Temporal-Modeling-for-Video-Captioning"><a href="#Hierarchical-Global-Local-Temporal-Modeling-for-Video-Captioning" class="headerlink" title="Hierarchical Global-Local Temporal Modeling for Video Captioning"></a>Hierarchical Global-Local Temporal Modeling for Video Captioning</h3><p><img src="https://i.loli.net/2019/09/02/m5xLQnzCJGsjWVc.png" alt="搜狗截图20190902161552.png"></p><ol><li><p>如何使用region features ?</p><p> encoder 部分由两层LSTM，第一层LSTM 构建 frames features 和 c3d features的 隐层状态，并送入第二层LSTM，</p><p>在第二层LSTM 的每一个step, 都对该step 对应帧上的 objetcs进行attention 加权求和，并送入LSTM中，得到该帧的objects 的聚合特征的隐层状态   </p><p> <img src="https://i.loli.net/2019/09/02/q6XNP8iSVzekyCE.png" alt="搜狗截图20190902165813.png"></p></li><li><p>region feature 的构成？</p><p>   每帧 objects features 的加权求和，再经过LSTM得到隐层状态</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>当前基于 objects feature 的论文，decoder 部分没有太大的新颖（一般都是Top-Down或者是 Soft-Attention），主要的新颖的地方是在 encoder 部分</li><li>encoder部分有的使用LSTM 以及attention 来更新 objects features；有的使用VLAD 来构建 行为特征，使用 objects 的时域轨迹和两层attention 来聚合特征；使用objetcs 的其他信息，比如 position 以及 label 等信息</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;CVPR 2018&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fine-grained Video Captioning for Sports Narrative&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CVPR 2019&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Grounde
      
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>目标检测模型中的性能评估——MAP(Mean Average Precision))</title>
    <link href="http://yoursite.com/2019/08/31/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E2%80%94%E2%80%94MAP-Mean-Average-Precision/"/>
    <id>http://yoursite.com/2019/08/31/目标检测模型中的性能评估——MAP-Mean-Average-Precision/</id>
    <published>2019-08-31T01:41:03.000Z</published>
    <updated>2019-08-31T01:43:06.273Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/katherine_hsr/article/details/79266880" target="_blank" rel="noopener">https://blog.csdn.net/katherine_hsr/article/details/79266880</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/katherine_hsr/article/details/79266880&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/katherine_
      
    
    </summary>
    
      <category term="目标检测" scheme="http://yoursite.com/categories/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="目标检测" scheme="http://yoursite.com/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>多标签图像分类任务的评价方法-mAP</title>
    <link href="http://yoursite.com/2019/08/31/%E5%A4%9A%E6%A0%87%E7%AD%BE%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%AF%84%E4%BB%B7%E6%96%B9%E6%B3%95-mAP/"/>
    <id>http://yoursite.com/2019/08/31/多标签图像分类任务的评价方法-mAP/</id>
    <published>2019-08-31T00:44:47.000Z</published>
    <updated>2019-08-31T01:44:17.241Z</updated>
    
    <content type="html"><![CDATA[<p>转载 from: <a href="http://blog.sina.com.cn/s/blog_9db078090102whzw.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_9db078090102whzw.html</a></p><p>多标签图像分类（Multi-label   Image  Classification）任务中图片的标签不止一个，因此评价不能用普通单标签图像分类的标准，即mean  accuracy，该任务采用的是和信息检索中类似的方法—mAP（mean  Average  Precision）。mAP虽然字面意思和mean  accuracy看起来差不多，但是计算方法要繁琐得多，以下是mAP的计算方法：</p><p>首先用训练好的模型得到所有测试样本的confidence  score，每一类（如car）的confidence   score保存到一个文件中（如comp1_cls_test_car.txt）。假设共有20个测试样本，每个的id，confidence  score和ground  truth  label如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQd58yJ15f" target="_blank" rel="noopener"><img src="http://s16.sinaimg.cn/mw690/002T2ChPgy6XQd58yJ15f" alt="img"></a> </p><p>接下来对confidence  score排序，得到：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQd86isc4c" target="_blank" rel="noopener"><img src="http://s13.sinaimg.cn/mw690/002T2ChPgy6XQd86isc4c" alt="img"></a><em>这张表很重要，接下来的precision和recall都是依照这个表计算的</em>﻿</p><p>然后计算precision和recall，这两个标准的定义如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQdjij4Ae8" target="_blank" rel="noopener"><img src="http://s9.sinaimg.cn/mw690/002T2ChPgy6XQdjij4Ae8" alt="img"></a></p><p>上图比较直观，圆圈内（true   positives + false  positives）是我们选出的元素,它对应于分类任务中我们取出的结果，比如对测试样本在训练好的car模型上分类，我们想得到top-5的结果，即：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQdbTpla5c" target="_blank" rel="noopener"><img src="http://s13.sinaimg.cn/mw690/002T2ChPgy6XQdbTpla5c" alt="img"></a></p><p>在这个例子中，true   positives就是指第4和第2张图片，false   positives就是指第13，19，6张图片。方框内圆圈外的元素（false   negatives和true  negatives）是相对于方框内的元素而言，在这个例子中，是指confidence   score排在top-5之外的元素，即：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQdcMwKCea" target="_blank" rel="noopener"><img src="http://s11.sinaimg.cn/mw690/002T2ChPgy6XQdcMwKCea" alt="img"></a> </p><p>其中，false   negatives是指第9，16，7，20张图片，true   negatives是指第1,18,5,15,10,17,12,14,8,11,3张图片。</p><p>那么，这个例子中Precision=2/5=40%，意思是对于car这一类别，我们选定了5个样本，其中正确的有2个，即准确率为40%；Recall=2/6=30%，意思是在所有测试样本中，共有6个car，但是因为我们只召回了2个，所以召回率为30%。</p><p>实际多类别分类任务中，我们通常不满足只通过top-5来衡量一个模型的好坏，而是需要知道从top-1到top-N（N是所有测试样本个数，本文中为20）对应的precision和recall。显然随着我们选定的样本越来也多，recall一定会越来越高，而precision整体上会呈下降趋势。把recall当成横坐标，precision当成纵坐标，即可得到常用的precision-recall曲线。这个例子的precision-recall曲线如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQddBz7ze9" target="_blank" rel="noopener"><img src="http://s10.sinaimg.cn/mw690/002T2ChPgy6XQddBz7ze9" alt="img"></a></p><p>接下来说说AP的计算，此处参考的是PASCAL  VOC  CHALLENGE的计算方法。首先设定一组阈值，[0, 0.1, 0.2, …, 1]。然后对于recall大于每一个阈值（比如recall&gt;0.3），我们都会得到一个对应的最大precision。这样，我们就计算出了11个precision。AP即为这11个precision的平均值。这种方法英文叫做11-point interpolated average precision。</p><p>当然PASCAL VOC CHALLENGE自2010年后就换了另一种计算方法。新的计算方法假设这N个样本中有M个正例，那么我们会得到M个recall值（1/M, 2/M, …, M/M）,对于每个recall值r，我们可以计算出对应（r’ &gt; r）的最大precision，然后对这M个precision值取平均即得到最后的AP值。计算方法如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPzy76AuWjHOp29" target="_blank" rel="noopener"><img src="http://s10.sinaimg.cn/mw690/002T2ChPzy76AuWjHOp29" alt="img"></a></p><p>相应的Precision-Recall曲线（这条曲线是单调递减的）如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPzy76AuH9Z6010" target="_blank" rel="noopener"><img src="http://s1.sinaimg.cn/mw690/002T2ChPzy76AuH9Z6010" alt="img"></a></p><p>AP衡量的是学出来的模型在每个类别上的好坏，mAP衡量的是学出的模型在所有类别上的好坏，得到AP后mAP的计算就变得很简单了，就是取所有AP的平均值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载 from: &lt;a href=&quot;http://blog.sina.com.cn/s/blog_9db078090102whzw.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.sina.com.cn/s/blog_9db
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>到底ResNet在解决一个什么问题呢</title>
    <link href="http://yoursite.com/2019/08/17/%E5%88%B0%E5%BA%95ResNet%E5%9C%A8%E8%A7%A3%E5%86%B3%E4%B8%80%E4%B8%AA%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%E5%91%A2/"/>
    <id>http://yoursite.com/2019/08/17/到底ResNet在解决一个什么问题呢/</id>
    <published>2019-08-17T02:21:24.000Z</published>
    <updated>2019-08-17T08:17:14.288Z</updated>
    
    <content type="html"><![CDATA[<p>对知乎上回答的简单总结</p><hr><p><strong>一、引言：为什么会有ResNet？Why ResNet？</strong></p><ul><li><p>过拟合？<br>  不是！因为深层网络表现为训练误差和测试误差都比较高，所以不是过拟合</p></li><li><p>梯度消失？梯度爆炸？<br>  不是！因为已经使用了 batch normalization ，在很大程度上解决了梯度消失、爆炸的问题，（yaya：我个人认为对梯度消失问题有一定的帮助，毕竟梯度值为1）</p></li><li><p>深层网络退化的原因？</p><p>  由于非线性激活函数的存在，使得信息被丢失，而不能完整保留，所以，应该在网络中加入恒等映射</p></li></ul><p>*<em>二、关于resnet网络结构 【没看懂为什么要有两层】  *</em></p><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g62hrnrs6nj30h9048aax.jpg" alt></p><ul><li>yaya 分析：<br>一层：  relu(x +  w1 x)<br>两层：  relu(x +w2 relu(w1 x))</li></ul><p>​       既然非线性激活函数会把信息丢失，为什么不这样：relu(wx) + x ，因为这样是错误的，本身relu是需要放在输出后面，起到非线性的作用，但是这样，就不算作对输出的非线</p><p>*<em>三、更多的理解    *</em></p><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g62hpvudvxj30iu0cc3zi.jpg" alt></p><hr><p>yaya 的总结/理解</p><ol><li>resnet 解决的不是过拟合的问题，因为过拟合的现象是，train loss 小，但是val loss大，但是当前深层网络的问题是train loss大，val loss也大</li><li>resnet 提供了一个梯度为1的反向传播，在一定程度上解决了梯度消失的问题</li><li>FPN中指出，不同深度的网络的结合可以结合不同的分辨率，但是当前resnet 只跨越了一种分辨率，因此，没能很好地利用这一特点，因此desnet便被提出来</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对知乎上回答的简单总结&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;一、引言：为什么会有ResNet？Why ResNet？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;过拟合？&lt;br&gt;  不是！因为深层网络表现为训练误差和测试误差都比较高，所以不是过拟合&lt;/p&gt;
&lt;/l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解Batch Normalization批标准化</title>
    <link href="http://yoursite.com/2019/08/15/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Batch-Normalization%E6%89%B9%E6%A0%87%E5%87%86%E5%8C%96/"/>
    <id>http://yoursite.com/2019/08/15/深入理解Batch-Normalization批标准化/</id>
    <published>2019-08-15T10:41:21.000Z</published>
    <updated>2019-08-15T10:43:29.239Z</updated>
    
    <content type="html"><![CDATA[<ul><li>转载 from：<a href="https://www.cnblogs.com/guoyaohua/p/8724433.html" target="_blank" rel="noopener">https://www.cnblogs.com/guoyaohua/p/8724433.html</a></li></ul><blockquote><p>这几天面试经常被问到BN层的原理，虽然回答上来了，但还是感觉答得不是很好，今天仔细研究了一下Batch Normalization的原理，以下为参考网上几篇文章总结得出。</p></blockquote><p>　　Batch Normalization作为最近一年来DL的重要成果，已经广泛被证明其有效性和重要性。虽然有些细节处理还解释不清其理论原因，但是实践证明好用才是真的好，别忘了DL从Hinton对深层网络做Pre-Train开始就是一个<strong>经验领先于理论分析</strong>的偏经验的一门学问。本文是对论文《Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift》的导读。</p><p>　　机器学习领域有个很重要的假设：<strong>IID独立同分布假设</strong>，就是假设训练数据和测试数据是满足相同分布的，这是通过训练数据获得的模型能够在测试集获得好的效果的一个基本保障。那BatchNorm的作用是什么呢？<strong>BatchNorm就是在深度神经网络训练过程中使得每一层神经网络的输入保持相同分布的。</strong></p><p>　　接下来一步一步的理解什么是BN。</p><p>　　为什么深度神经网络<strong>随着网络深度加深，训练起来越困难，收敛越来越慢？</strong>这是个在DL领域很接近本质的好问题。很多论文都是解决这个问题的，比如ReLU激活函数，再比如Residual Network，BN本质上也是解释并从某个不同的角度来解决这个问题的。</p><h2 id="一、“Internal-Covariate-Shift”问题"><a href="#一、“Internal-Covariate-Shift”问题" class="headerlink" title="一、“Internal Covariate Shift”问题"></a>一、“Internal Covariate Shift”问题</h2><p>　　从论文名字可以看出，BN是用来解决“Internal Covariate Shift”问题的，那么首先得理解什么是“Internal Covariate Shift”？</p><p>　　论文首先说明Mini-Batch SGD相对于One Example SGD的两个优势：梯度更新方向更准确；并行计算速度快；（为什么要说这些？因为BatchNorm是基于Mini-Batch SGD的，所以先夸下Mini-Batch SGD，当然也是大实话）；然后吐槽下SGD训练的缺点：超参数调起来很麻烦。（作者隐含意思是用BN就能解决很多SGD的缺点）</p><p>　　接着引入<strong>covariate shift的概念</strong>：<strong>如果ML系统实例集合&lt;X,Y&gt;中的输入值X的分布老是变，这不符合IID假设</strong>，网络模型很难<strong>稳定的学规律</strong>，这不得引入迁移学习才能搞定吗，我们的ML系统还得去学习怎么迎合这种分布变化啊。对于深度学习这种包含很多隐层的网络结构，在训练过程中，因为各层参数不停在变化，所以每个隐层都会面临covariate shift的问题，也就是<strong>在训练过程中，隐层的输入分布老是变来变去，这就是所谓的“Internal Covariate Shift”，Internal指的是深层网络的隐层，是发生在网络内部的事情，而不是covariate shift问题只发生在输入层。</strong></p><p>　　然后提出了BatchNorm的基本思想：能不能<strong>让每个隐层节点的激活输入分布固定下来呢</strong>？这样就避免了“Internal Covariate Shift”问题了。</p><p>　　BN不是凭空拍脑袋拍出来的好点子，它是有启发来源的：之前的研究表明如果在图像处理中对输入图像进行白化（Whiten）操作的话——所谓<strong>白化</strong>，<strong>就是对输入数据分布变换到0均值，单位方差的正态分布</strong>——那么神经网络会较快收敛，那么BN作者就开始推论了：图像是深度神经网络的输入层，做白化能加快收敛，那么其实对于深度网络来说，其中某个隐层的神经元是下一层的输入，意思是其实深度神经网络的每一个隐层都是输入层，不过是相对下一层来说而已，那么能不能对每个隐层都做白化呢？这就是启发BN产生的原初想法，而BN也确实就是这么做的，<strong>可以理解为对深层神经网络每个隐层神经元的激活值做简化版本的白化操作。</strong></p><h2 id="二、BatchNorm的本质思想"><a href="#二、BatchNorm的本质思想" class="headerlink" title="二、BatchNorm的本质思想"></a><strong>二、</strong>BatchNorm的本质思想</h2><p>　　BN的基本思想其实相当直观：因为深层神经网络在做非线性变换前的<strong>激活输入值</strong>（就是那个x=WU+B，U是输入）<strong>随着网络深度加深或者在训练过程中，其分布逐渐发生偏移或者变动，之所以训练收敛慢，一般是整体分布逐渐往非线性函数的取值区间的上下限两端靠近</strong>（对于Sigmoid函数来说，意味着激活输入值WU+B是大的负值或正值），所以这<strong>导致反向传播时低层神经网络的梯度消失</strong>，这是训练深层神经网络收敛越来越慢的<strong>本质原因</strong>，<strong>而BN就是通过一定的规范化手段，把每层神经网络任意神经元这个输入值的分布强行拉回到均值为0方差为1的标准正态分布</strong>，其实就是把越来越偏的分布强制拉回比较标准的分布，这样使得激活输入值落在非线性函数对输入比较敏感的区域，这样输入的小变化就会导致损失函数较大的变化，意思是<strong>这样让梯度变大，避免梯度消失问题产生，而且梯度变大意味着学习收敛速度快，能大大加快训练速度。</strong></p><p>　　THAT’S IT。其实一句话就是：<strong>对于每个隐层神经元，把逐渐向非线性函数映射后向取值区间极限饱和区靠拢的输入分布强制拉回到均值为0方差为1的比较标准的正态分布，使得非线性变换函数的输入值落入对输入比较敏感的区域，以此避免梯度消失问题。</strong>因为梯度一直都能保持比较大的状态，所以很明显对神经网络的参数调整效率比较高，就是变动大，就是说向损失函数最优值迈动的步子大，也就是说收敛地快。BN说到底就是这么个机制，方法很简单，道理很深刻。</p><p>　　上面说得还是显得抽象，下面更形象地表达下这种调整到底代表什么含义。</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405225246905-37854887.png" alt="img"></p><p>  图1  几个正态分布</p><p>　　假设某个隐层神经元原先的激活输入x取值符合正态分布，正态分布均值是-2，方差是0.5，对应上图中最左端的浅蓝色曲线，通过BN后转换为均值为0，方差是1的正态分布（对应上图中的深蓝色图形），意味着什么，意味着输入x的取值正态分布整体右移2（均值的变化），图形曲线更平缓了（方差增大的变化）。这个图的意思是，BN其实就是把每个隐层神经元的激活输入分布从偏离均值为0方差为1的正态分布通过平移均值压缩或者扩大曲线尖锐程度，调整为均值为0方差为1的正态分布。</p><p>　　那么把激活输入x调整到这个正态分布有什么用？首先我们看下均值为0，方差为1的标准正态分布代表什么含义：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405225314624-527885612.png" alt="img"></p><p>图2  均值为0方差为1的标准正态分布图</p><p>　　这意味着在一个标准差范围内，也就是说64%的概率x其值落在[-1,1]的范围内，在两个标准差范围内，也就是说95%的概率x其值落在了[-2,2]的范围内。那么这又意味着什么？我们知道，激活值x=WU+B,U是真正的输入，x是某个神经元的激活值，假设非线性函数是sigmoid，那么看下sigmoid(x)其图形：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143109455-1460017374.png" alt="img"></p><p>图3. Sigmoid(x)</p><p>及sigmoid(x)的导数为：G’=f(x)*(1-f(x))，因为f(x)=sigmoid(x)在0到1之间，所以G’在0到0.25之间，其对应的图如下：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142351924-124461667.png" alt="img"></p><p>图4  Sigmoid(x)导数图</p><p>　　假设没有经过BN调整前x的原先正态分布均值是-6，方差是1，那么意味着95%的值落在了[-8,-4]之间，那么对应的Sigmoid（x）函数的值明显接近于0，这是典型的梯度饱和区，在这个区域里梯度变化很慢，为什么是梯度饱和区？请看下sigmoid(x)如果取值接近0或者接近于1的时候对应导数函数取值，接近于0，意味着梯度变化很小甚至消失。而假设经过BN后，均值是0，方差是1，那么意味着95%的x值落在了[-2,2]区间内，很明显这一段是sigmoid(x)函数接近于线性变换的区域，意味着x的小变化会导致非线性函数值较大的变化，也即是梯度变化较大，对应导数函数图中明显大于0的区域，就是梯度非饱和区。</p><p>　　从上面几个图应该看出来BN在干什么了吧？其实就是把隐层神经元激活输入x=WU+B从变化不拘一格的正态分布通过BN操作拉回到了均值为0，方差为1的正态分布，即原始正态分布中心左移或者右移到以0为均值，拉伸或者缩减形态形成以1为方差的图形。什么意思？就是说<strong>经过BN后，目前大部分Activation的值落入非线性函数的线性区内，其对应的导数远离导数饱和区，这样来加速训练收敛过程。</strong></p><p>　　但是很明显，看到这里，稍微了解神经网络的读者一般会提出一个疑问：如果都通过BN，那么不就跟把非线性函数替换成线性函数效果相同了？这意味着什么？我们知道，如果是多层的线性函数变换其实这个深层是没有意义的，因为多层线性网络跟一层线性网络是等价的。这意味着网络的<strong>表达能力</strong>下降了，这也意味着深度的意义就没有了。<strong>所以BN为了保证非线性的获得，对变换后的满足均值为0方差为1的x又进行了scale加上shift操作(y=scale*x+shift)</strong>，每个神经元增加了两个参数scale和shift参数，这两个参数是通过训练学习到的，意思是通过scale和shift把这个值从标准正态分布左移或者右移一点并长胖一点或者变瘦一点，每个实例挪动的程度不一样，这样等价于非线性函数的值从正中心周围的线性区往非线性区动了动。核心思想应该是想找到一个线性和非线性的较好平衡点，既能享受非线性的较强表达能力的好处，又避免太靠非线性区两头使得网络收敛速度太慢。当然，这是我的理解，论文作者并未明确这样说。但是很明显这里的scale和shift操作是会有争议的，因为按照论文作者论文里写的理想状态，就会又通过scale和shift操作把变换后的x调整回未变换的状态，那不是饶了一圈又绕回去原始的“Internal Covariate Shift”问题里去了吗，感觉论文作者并未能够清楚地解释scale和shift操作的理论原因。</p><h2 id="三、训练阶段如何做BatchNorm"><a href="#三、训练阶段如何做BatchNorm" class="headerlink" title="三、训练阶段如何做BatchNorm"></a>三、训练阶段如何做BatchNorm</h2><p>　　上面是对BN的抽象分析和解释，具体在Mini-Batch SGD下做BN怎么做？其实论文里面这块写得很清楚也容易理解。为了保证这篇文章完整性，这里简单说明下。</p><p>　　假设对于一个深层神经网络来说，其中两层结构如下：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405213859690-1933561230.png" alt="img"></p><p>  图5  DNN其中两层</p><p>　　要对每个隐层神经元的激活值做BN，可以想象成每个隐层又加上了一层BN操作层，它位于X=WU+B激活值获得之后，非线性函数变换之前，其图示如下：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405213955224-1791925244.png" alt="img"></p><p>  图6. BN操作</p><p>　　对于Mini-Batch SGD来说，一次训练过程里面包含m个训练实例，其具体BN操作就是对于隐层内每个神经元的激活值来说，进行如下变换：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142802238-1209499294.png" alt="img"></p><p>　　要注意，这里t层某个神经元的x(k)不是指原始输入，就是说不是t-1层每个神经元的输出，而是t层这个神经元的线性激活x=WU+B，这里的U才是t-1层神经元的输出。变换的意思是：某个神经元对应的原始的激活x通过减去mini-Batch内m个实例获得的m个激活x求得的均值E(x)并除以求得的方差Var(x)来进行转换。</p><p>　　上文说过经过这个<strong>变换后某个神经元的激活x形成了均值为0，方差为1的正态分布，目的是把值往后续要进行的非线性变换的线性区拉动，增大导数值，增强反向传播信息流动性，加快训练收敛速度。**</strong>但是这样会导致网络表达能力下降，为了防止这一点，每个神经元增加两个调节参数（scale和shift），这两个参数是通过训练来学习到的，用来对变换后的激活反变换，使得网络表达能力增强，即对变换后的激活进行如下的scale和shift操作，这其实是变换的反操作：**</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142923190-79595046.png" alt="img"></p><p>　　BN其具体操作流程，如论文中描述的一样：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142956288-903484055.png" alt="img"></p><p>　　过程非常清楚，就是上述公式的流程化描述，这里不解释了，直接应该能看懂。</p><h2 id="四、BatchNorm的推理-Inference-过程"><a href="#四、BatchNorm的推理-Inference-过程" class="headerlink" title="四、BatchNorm的推理(Inference)过程"></a>四、BatchNorm的推理(Inference)过程</h2><p>　　BN在训练的时候可以根据Mini-Batch里的若干训练实例进行激活数值调整，但是在推理（inference）的过程中，很明显输入就只有一个实例，看不到Mini-Batch其它实例，那么这时候怎么对输入做BN呢？因为很明显一个实例是没法算实例集合求出的均值和方差的。这可如何是好？</p><p>　　既然没有从Mini-Batch数据里可以得到的统计量，那就想其它办法来获得这个统计量，就是均值和方差。可以用从所有训练实例中获得的统计量来代替Mini-Batch里面m个训练实例获得的均值和方差统计量，因为本来就打算用全局的统计量，只是因为计算量等太大所以才会用Mini-Batch这种简化方式的，那么在推理的时候直接用全局统计量即可。</p><p>　　决定了获得统计量的数据范围，那么接下来的问题是如何获得均值和方差的问题。很简单，因为每次做Mini-Batch训练时，都会有那个Mini-Batch里m个训练实例获得的均值和方差，现在要全局统计量，只要把每个Mini-Batch的均值和方差统计量记住，然后对这些均值和方差求其对应的数学期望即可得出全局统计量，即：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143405654-1995556833.png" alt="img"></p><p>　　有了均值和方差，每个隐层神经元也已经有对应训练好的Scaling参数和Shift参数，就可以在推导的时候对每个神经元的激活数据计算NB进行变换了，在推理过程中进行BN采取如下方式：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143658338-63450857.png" alt="img"></p><p>　　这个公式其实和训练时</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143807788-1841864822.png" alt="img"></p><p>　　是等价的，通过简单的合并计算推导就可以得出这个结论。那么为啥要写成这个变换形式呢？我猜作者这么写的意思是：在实际运行的时候，按照这种变体形式可以减少计算量，为啥呢？因为对于每个隐层节点来说：</p><p>　　　　　　　　<img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407144519480-1024698421.png" alt="img">　　<img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407144549010-487189588.png" alt="img"></p><p>　　都是固定值，这样这两个值可以事先算好存起来，在推理的时候直接用就行了，这样比原始的公式每一步骤都现算少了除法的运算过程，乍一看也没少多少计算量，但是如果隐层节点个数多的话节省的计算量就比较多了。</p><h2 id="五、BatchNorm的好处"><a href="#五、BatchNorm的好处" class="headerlink" title="五、BatchNorm的好处"></a>五、BatchNorm的好处</h2><p>　　BatchNorm为什么NB呢，关键还是效果好。<strong>①**</strong>不仅仅极大提升了训练速度，收敛过程大大加快；②还能增加分类效果，一种解释是这是类似于Dropout的一种防止过拟合的正则化表达方式，所以不用Dropout也能达到相当的效果；③另外调参过程也简单多了，对于初始化要求没那么高，而且可以使用大的学习率等。**总而言之，经过这么简单的变换，带来的好处多得很，这也是为何现在BN这么快流行起来的原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;转载 from：&lt;a href=&quot;https://www.cnblogs.com/guoyaohua/p/8724433.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/guoyaohua
      
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>linux 文件名中有空格、括号 时如何操作</title>
    <link href="http://yoursite.com/2019/08/14/linux-%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%AD%E6%9C%89%E7%A9%BA%E6%A0%BC%E3%80%81%E6%8B%AC%E5%8F%B7-%E6%97%B6%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/08/14/linux-文件名中有空格、括号-时如何操作/</id>
    <published>2019-08-14T08:22:53.000Z</published>
    <updated>2019-08-14T08:25:27.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何处理-cd-cp"><a href="#如何处理-cd-cp" class="headerlink" title="如何处理 cd cp"></a>如何处理 <code>cd</code> <code>cp</code></h3><ul><li><p>将文件名用<strong>双引号</strong> 包起来</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd = 'cp -r <span class="string">"&#123;&#125;"</span> <span class="string">"&#123;&#125;"</span>'.format(source_path, target_path)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何处理-cd-cp&quot;&gt;&lt;a href=&quot;#如何处理-cd-cp&quot; class=&quot;headerlink&quot; title=&quot;如何处理 cd cp&quot;&gt;&lt;/a&gt;如何处理 &lt;code&gt;cd&lt;/code&gt; &lt;code&gt;cp&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将文件
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python 3.3.3 字面量,正则,反斜杠和原始字符串</title>
    <link href="http://yoursite.com/2019/08/14/python-3-3-3-%E5%AD%97%E9%9D%A2%E9%87%8F-%E6%AD%A3%E5%88%99-%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%92%8C%E5%8E%9F%E5%A7%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2019/08/14/python-3-3-3-字面量-正则-反斜杠和原始字符串/</id>
    <published>2019-08-14T06:59:02.000Z</published>
    <updated>2019-08-14T07:00:06.680Z</updated>
    
    <content type="html"><![CDATA[<ul><li>注明：转载 from <a href="https://www.cnblogs.com/xiangnan/p/3446904.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiangnan/p/3446904.html</a></li></ul><h1 id="两个不起眼但是比较重要的设定"><a href="#两个不起眼但是比较重要的设定" class="headerlink" title="两个不起眼但是比较重要的设定"></a>两个不起眼但是比较重要的设定</h1><ul><li>Python str类型的字面量解释器</li></ul><p>当反斜杠及其紧接字符无法构成一个具有特殊含义的序列(‘recognized escape sequences’)时,Python选择保留全部字符.直接看例子:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\c'</span></span><br><span class="line"><span class="string">'\\c'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\d'</span></span><br><span class="line"><span class="string">'\\d'</span></span><br></pre></td></tr></table></figure><p>官方管’\c’这种序列叫’unrecognized escape sequences’.官方文档相应部分:</p><p>Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., <em>the backslash is left in the string</em>. (This behavior is useful when debugging: if an escape sequence is mistyped, the resulting output is more easily recognized as broken.) </p><p>按这段英文的意思,估计C语言里面,’c’和’\c’是等同的.Python是’\c’和’\c’等同.这个等以后学C语言再确定.</p><p>与上面对应的是,如果紧接字符能够和反斜杠构成’recognized escape sequences’的<strong>全部</strong>或者<strong>起始部分</strong>,中文就叫’被承认的转义序列’吧.比如:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\b'</span></span><br><span class="line"><span class="string">'\x08'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\n'</span></span><br><span class="line"><span class="string">'\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\x'</span></span><br><span class="line"><span class="symbol">SyntaxError:</span> (unicode error) <span class="string">'unicodeescape'</span> codec can<span class="string">'t decode bytes in position 0-1: truncated \xXX escape</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; '</span>\N<span class="string">'</span></span><br><span class="line"><span class="string">SyntaxError: (unicode error) '</span>unicodeescape<span class="string">' codec can'</span>t decode bytes <span class="keyword">in</span> position <span class="number">0</span>-<span class="number">1</span>: malformed \N character escape</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\U'</span></span><br><span class="line"><span class="symbol">SyntaxError:</span> (unicode error) <span class="string">'unicodeescape'</span> codec can<span class="string">'t decode bytes in position 0-1: truncated \UXXXXXXXX escape</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; '</span>\u<span class="string">'</span></span><br><span class="line"><span class="string">SyntaxError: (unicode error) '</span>unicodeescape<span class="string">' codec can'</span>t decode bytes <span class="keyword">in</span> position <span class="number">0</span>-<span class="number">1</span>: truncated \uXXXX escape</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><ul><li>Python re模块正则表达式解释器</li></ul><p>当反斜杠及其紧接字符无法构成一个具有特殊含义的序列(special sequences)时,re选择忽略反斜杠,例如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\e'</span>,<span class="string">'eee'</span>)</span><br><span class="line">[<span class="string">'e'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'e'</span>,<span class="string">'eee'</span>)</span><br><span class="line">[<span class="string">'e'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>]</span><br></pre></td></tr></table></figure><p>可见,’\e’和’e’起到了完全一样的效果.Python相关文档描述是:</p><p>If the ordinary character is not on the list, then the resulting RE will match the second character. For example, <code>\$</code> matches the character <code>&#39;$&#39;</code>.</p><p>与上面对应的是,如果能够构成special sequences,那么re会解释为相应含义.例如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\w'</span>,<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br></pre></td></tr></table></figure><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><p>字面量(Literals),是用于表示一些Python内建类型的常量的符号.最常见的字面量类型是str literals 和 bytes literals.</p><p>比如:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span></span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"abc"</span></span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'啊哦额'</span></span><br><span class="line"><span class="string">'啊哦额'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'abc'</span></span><br><span class="line"><span class="string">b'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">r'\n'</span></span><br><span class="line"><span class="string">'\\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'啊哦额'</span></span><br><span class="line">SyntaxError: bytes can only contain ASCII literal characters.</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>反斜杠\的用途按紧接其后的字符种类可划分为3类:</p><p>1.将特殊字符转换为字面量.这特殊字符包括(单引号,双引号,反斜杠):’”\</p><p>2.将普通字符转换为特殊序列.包括:abfNnrtuUvx0123456789.</p><p>(注意,bytes字面量中,NuU这三个普通字符无法被转义成特殊序列)</p><p>3.将”新行”和自身忽略掉.这个比较抽象,举例说明:py文件中,某个字符串太长了,以至于需要分两行写,那么你可以插个反斜杠,紧接着换行,然后写剩余字符串.</p><p>下面是官方文档归纳的表:</p><table><thead><tr><th>Escape Sequence</th><th>Meaning</th><th>Notes</th></tr></thead><tbody><tr><td><code>\newline</code></td><td>Backslash and newline ignored</td><td></td></tr><tr><td><code>\\</code></td><td>Backslash (<code>\</code>)</td><td></td></tr><tr><td><code>\&#39;</code></td><td>Single quote (<code>&#39;</code>)</td><td></td></tr><tr><td><code>\&quot;</code></td><td>Double quote (<code>&quot;</code>)</td><td></td></tr><tr><td><code>\a</code></td><td>ASCII Bell (BEL)</td><td></td></tr><tr><td><code>\b</code></td><td>ASCII Backspace (BS)</td><td></td></tr><tr><td><code>\f</code></td><td>ASCII Formfeed (FF)</td><td></td></tr><tr><td><code>\n</code></td><td>ASCII Linefeed (LF)</td><td></td></tr><tr><td><code>\r</code></td><td>ASCII Carriage Return (CR)</td><td></td></tr><tr><td><code>\t</code></td><td>ASCII Horizontal Tab (TAB)</td><td></td></tr><tr><td><code>\v</code></td><td>ASCII Vertical Tab (VT)</td><td></td></tr><tr><td><code>\ooo</code></td><td>Character with octal value <em>ooo</em></td><td>(1,3)</td></tr><tr><td><code>\xhh</code></td><td>Character with hex value <em>hh</em></td><td>(2,3)</td></tr></tbody></table><p>Escape sequences only recognized in string literals are:</p><table><thead><tr><th>Escape Sequence</th><th>Meaning</th><th>Notes</th></tr></thead><tbody><tr><td><code>\N{name}</code></td><td>Character named <em>name</em> in the Unicode database</td><td>(4)</td></tr><tr><td><code>\uxxxx</code></td><td>Character with 16-bit hex value <em>xxxx</em></td><td>(5)</td></tr><tr><td><code>\Uxxxxxxxx</code></td><td>Character with 32-bit hex value <em>xxxxxxxx</em></td><td>(6)</td></tr></tbody></table><p>举例:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\N&#123;END OF LINE&#125;'</span></span><br><span class="line"><span class="string">'\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\N&#123;HORIZONTAL TABULATION&#125;'</span></span><br><span class="line"><span class="string">'\t'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\u9f6a'</span>==<span class="string">'齪'</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\1'</span>==<span class="string">'\01'</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\1'</span>==<span class="string">'\001'</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\1'</span>==<span class="string">'\0000001'</span></span><br><span class="line">False</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><ul><li>正则表达式的反斜杠的作用</li></ul><p>一种是使紧跟在后面的元字符(special characters或metacharacters)失去特殊含义,变为字面量.这些元字符有14个:</p><p>.^$*+?{}<a href></a>|</p><p>另一种是使紧跟在后面的普通字符变得具有特殊含义.这些普通字符是:</p><p>AbBdDsSwWZ0123456789</p><p>以及在str字面量中能被反斜杠转义的字符:</p><p>&#39;“abfnrtuUvx0123456789</p><p>例如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\"'</span>,<span class="string">'"'</span>)</span><br><span class="line">[<span class="string">'"'</span>]</span><br></pre></td></tr></table></figure><p>正则pattern的反斜杠的作用和Python字面量的反斜杠类似,这据说是带来”反斜杠灾难”的根源.最典型的莫过于你需要用正则’\\‘才能匹配字面量反斜杠’\‘.</p><p>为方便说明,我们假设re.search(pattern,string)中,pattern表示正则表达式字符串,string表示待匹配的字符串.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; re.search(<span class="string">'\\\\'</span>,<span class="string">'\\'</span>)</span><br><span class="line">&lt;_sre<span class="selector-class">.SRE_Match</span> <span class="selector-tag">object</span> at <span class="number">0</span>x02858528&gt;</span><br></pre></td></tr></table></figure><p>详细来说就是一个文本层级的反斜杠’&#39;(比如你在txt文件中看到的反斜杠),对应Python str 字面量的’\‘,对应正则pattern的’\\‘.这个确实比较难以理解,实在不行就住这点就好:<strong>如果不是最简单的正则类型(比如’ab’),强烈推荐对pattern使用r前缀符</strong>.这样容易理解:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.search(<span class="string">r'\\'</span>,<span class="string">'\\'</span>)</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x02858448</span>&gt;</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>1.多重含义的特殊序列处理机制</li></ul><p>b0123456789比较特殊,它们在Python字面量和re正则中都能和反斜杠构成作用不同的特殊序列.例如\b,在python 字面量中解释为”退格键”.re正则中解释为’单词边界’.<strong>python 字面量有优先解释权</strong>,如下可证:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\b'</span>,<span class="string">'\b'</span>)  <span class="comment">#'\b'被优先解释为退格键,而不是单词边界</span></span><br><span class="line">[<span class="string">'\x08'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b'</span>,<span class="string">'\b'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b'</span>,<span class="string">'b'</span>) </span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>]</span><br></pre></td></tr></table></figure><p>再比如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'(a)\1\1'</span>,<span class="string">'aaa'</span>) <span class="comment">#\1按字面量优先解释为八进制字符串,因此无匹配结果</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'(a)\\1\\1'</span>,<span class="string">'aaa'</span>)  <span class="comment">#\\1按正则引擎层级的反斜杠解释为第一个匹配组提取到的字符,相当于'(a)aa'</span></span><br><span class="line">[<span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'a\1\1'</span>,<span class="string">'a\1\1'</span>) <span class="comment">#\1按字面量优先解释为八进制字符串,所以有匹配结果</span></span><br><span class="line">[<span class="string">'a\x01\x01'</span>]</span><br></pre></td></tr></table></figure><p>了解这个设置有什么用?</p><p>1.当你想使用正则层级的特殊序列\1时,如果你没有使用r作为前缀,那么你必须使用\1才能如愿.</p><p>2.当你想使用字面量层级的特殊序列\1时,则不能使用r作为pattern前缀.</p><p>想想,你有可能在一个r前缀的字符串中写出能够匹配值为1的八进制字符串的pattern吗?</p><p>也许我太较真了,因为实践中好像从没遇到过需要匹配值为1的八进制字符串的情况,但理论上就是这样的.</p><ul><li><strong>2.正则表达式中特殊序列的准确定义的猜想</strong></li></ul><p>官方文档下面的一句话值得推敲:</p><p>Note that <code>\b</code> is used to represent word boundaries, and means “backspace” only inside character classes</p><p>意思是说\b只有在[…]里面时才表示退格键,这显然是错的.比如下面这个例子,\b没有在[]之内,但它是按”退格键”解释的,并非”单词边界”:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\b'</span>,<span class="string">'\b'</span>)</span><br><span class="line">[<span class="string">'\x08'</span>]</span><br></pre></td></tr></table></figure><p>除非官方文档描述的\b是指文本层面的数据(比如你在txt文档里看到的\b).</p><p>由此引出了一个猜想,re的正则pattern中”反斜杠+普通字符”构成特殊序列或”反斜杠+特殊字符”构成字面量–这种描述中的反斜杠准确来说是指两个反斜杠!</p><p>仍然是举例说明:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b\w+\\b'</span>,<span class="string">'one two three'</span>)  <span class="comment">#必须用\\b才能表示单词边界</span></span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b\\w+\\b'</span>,<span class="string">'one two three'</span>)  <span class="comment">#想想,为什么\w和\\w都一样</span></span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\d'</span>,<span class="string">'123'</span>)</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\d'</span>,<span class="string">'123'</span>)</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><ul><li>3.u和U只在str字面量中才能被转义,bytes字面量中是普通字符.</li></ul><p>以下是我猜测的正则表达式分析器和Python字面量分析器的传递规则表格:</p><table><thead><tr><th>Python string literal</th><th>values passed to regular expression</th><th>number of characters</th><th>what regular expression engine does</th><th>real meaning for regular expression</th></tr></thead><tbody><tr><td>\e</td><td>\e</td><td>2</td><td>ignore the backslash</td><td>e</td></tr><tr><td>\e</td><td>\e</td><td>2</td><td>ignore the backslash</td><td>e</td></tr><tr><td>e</td><td>e</td><td>1</td><td>nothing spacial</td><td>e</td></tr><tr><td>\n</td><td>\n</td><td>1</td><td>nothing spacial</td><td>换行符</td></tr><tr><td>\n</td><td>\n</td><td>2</td><td>\n is special</td><td>换行符</td></tr><tr><td>\b</td><td>\b</td><td>1</td><td>nothing spacial</td><td>退格键</td></tr><tr><td>\b</td><td>\b</td><td>2</td><td>\b is special</td><td>word boundary</td></tr><tr><td>\s</td><td>\s</td><td>2</td><td>\s is special</td><td>Unicode whitespace characters</td></tr><tr><td>\</td><td>\</td><td>1</td><td>must followed by a charcter</td><td>Can’t form any meaning</td></tr><tr><td>\\</td><td>\</td><td>2</td><td>remove all special meanning of \</td><td>\</td></tr><tr><td>*</td><td>*</td><td>1</td><td>* is special</td><td>repeat the left characters 0 or more times</td></tr><tr><td>*</td><td>*</td><td>2</td><td>remove all special meanning of *</td><td>*</td></tr></tbody></table><p>最后是待探究的例子:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[<span class="string">'\x08'</span>, <span class="string">'\x08'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[<span class="string">'\x08'</span>, <span class="string">'\x08'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'c'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'c'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'\\c'</span>, <span class="string">'\\c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'\\c'</span>, <span class="string">'\\c'</span>]</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>参考:</p><p>Python 3.3.3 官方文档</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;注明：转载 from &lt;a href=&quot;https://www.cnblogs.com/xiangnan/p/3446904.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/xiangna
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>glob 之 **</title>
    <link href="http://yoursite.com/2019/08/13/glob-%E4%B9%8B/"/>
    <id>http://yoursite.com/2019/08/13/glob-之/</id>
    <published>2019-08-13T06:25:21.000Z</published>
    <updated>2019-08-14T02:07:02.733Z</updated>
    
    <content type="html"><![CDATA[<ul><li>该篇主要介绍glob的一些使用小技巧</li></ul><h3 id="想要获得某个文件目录下所有-指定文件格式-的所有文件"><a href="#想要获得某个文件目录下所有-指定文件格式-的所有文件" class="headerlink" title="想要获得某个文件目录下所有 指定文件格式 的所有文件"></a>想要获得某个文件目录下所有 <strong><em>指定文件格式</em></strong> 的所有文件</h3><ul><li><p>假设有一个文件环境如下图所示</p><p><img src="https://i.loli.net/2019/08/14/sjTANPfDuV6cord.png" alt="搜狗截图20190814100532.png"></p></li></ul><ul><li><p>比如想要获得<code>/userhome/dataset/MSVD/YouTubeClips/YouTubeClips</code> 下 <code>.avi</code>格式的所有文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span> = <span class="string">'/userhome/dataset/MSVD/YouTubeClips/YouTubeClips/'</span></span><br><span class="line">glob.glob(<span class="built_in">path</span> + <span class="string">'*.avi'</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>想要获得某目录下的所有子目录中的所有指定文件格式的所有文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span> = <span class="string">'/userhome/dataset/MSVD/YouTubeClips/'</span></span><br><span class="line">glob.glob(<span class="built_in">path</span> + <span class="string">'**/'</span> + <span class="string">'*.avi'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">path</span> = <span class="string">'/userhome/dataset/MSVD/'</span></span><br><span class="line">glob.glob(<span class="built_in">path</span> + <span class="string">'**/'</span> + <span class="string">'**/'</span> + <span class="string">'*.avi'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;该篇主要介绍glob的一些使用小技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;想要获得某个文件目录下所有-指定文件格式-的所有文件&quot;&gt;&lt;a href=&quot;#想要获得某个文件目录下所有-指定文件格式-的所有文件&quot; class=&quot;headerlink&quot; title=&quot;想
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title> pytorch clone() vs copy_()</title>
    <link href="http://yoursite.com/2019/08/06/pytorch-clone-vs-copy/"/>
    <id>http://yoursite.com/2019/08/06/pytorch-clone-vs-copy/</id>
    <published>2019-08-06T07:05:25.000Z</published>
    <updated>2019-08-06T07:06:02.565Z</updated>
    
    <content type="html"><![CDATA[<p><code>clone</code>() → Tensor</p><ul><li>反向传播时，将会返回到原来的变量上<br>Returns a copy of the <code>self</code> tensor. The copy has the same size and data type as <code>self</code>.</li><li>NOTE</li><li>Unlike copy_(), this function is recorded in the computation graph. Gradients propagating to the cloned tensor will propagate to the original tensor.</li></ul><hr><p><code>copy_</code>(<em>src</em>, <em>non_blocking=False</em>) → Tensor</p><ul><li><p>只是值得复制<br>Copies the elements from <code>src</code> into <code>self</code> tensor and returns <code>self</code>.</p></li><li><p>The <code>src</code> tensor must be <a href="https://pytorch.org/docs/stable/notes/broadcasting.html#broadcasting-semantics" target="_blank" rel="noopener">broadcastable</a> with the <code>self</code> tensor. It may be of a different data type or reside on a different device.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;clone&lt;/code&gt;() → Tensor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反向传播时，将会返回到原来的变量上&lt;br&gt;Returns a copy of the &lt;code&gt;self&lt;/code&gt; tensor. The copy has the same siz
      
    
    </summary>
    
      <category term="pytorch" scheme="http://yoursite.com/categories/pytorch/"/>
    
    
      <category term="pytorch" scheme="http://yoursite.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>实验中遇到的问题及解决</title>
    <link href="http://yoursite.com/2019/08/05/%E5%AE%9E%E9%AA%8C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2019/08/05/实验中遇到的问题及解决/</id>
    <published>2019-08-05T11:22:00.000Z</published>
    <updated>2019-08-05T11:41:45.360Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h3><ul><li>问题描述：首先表现为：在pycharm debug下和在running模式下的实验结果不一致，<br><br>后来，在训练阶段将预训练的模型保存下来，载入evaluate.py 文件中再次进行评估，得到的分数与在训练阶段评估的分数不一致</li><li>解决思路：由于第二个现象，更加容易解决，因此先解决他，师兄提出一个办法，将保存的模型再次载入，这样就可以有两个网络，然后比较两个网络的数据是在哪里出现差异的，这样可以找到问题。</li><li>解决办法：</li></ul><ol><li>在训练一个epoch 后，将模型保存了下来，然后用两个网络，一个时train.py中重新加载这个网络，一个是在evaluate.py中加载这个网络，将得到的结果，进行比较，（看输出的结果是否一致），然后发现，在一些video 输出的结果是一样的，在一些video是不一样的。<br></li><li>找到那些video对应的结果不一样的所对应的iteration，在该iteration打印出了网络中的部分变量的数据，发现，在dataloader的数据就是不一样的.<br></li><li>那么问题就是出现在数据加载上。通过对数据加载部分的代码进行调试，发现，仅在num_workers=0时，两个dataloader的数据才一样，而采用多线程的话，两个dataloader的数据不完全一样。而又在其他的代码上测试，多线程不会影响数据加载，那么问题就是出现在，自己设计的dataset上，<br></li><li>又发现在加载h5py文件时，没有取切片，而self.critical pytorch代码时加上了的，通过加上切片 <code>[:]</code> 发现在多线程时，是正常的。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题-1&quot;&gt;&lt;a href=&quot;#问题-1&quot; class=&quot;headerlink&quot; title=&quot;问题 1&quot;&gt;&lt;/a&gt;问题 1&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;问题描述：首先表现为：在pycharm debug下和在running模式下的实验结果不一致，&lt;br&gt;&lt;br&gt;后
      
    
    </summary>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="问题总结" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
