<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShiYaya</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-12T06:47:49.748Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ShiYaya</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Quality Estimation for Image Captions Based on Large-scale Human Evaluations</title>
    <link href="http://yoursite.com/2019/12/12/Quality-Estimation-for-Image-Captions-Based-on-Large-scale-Human-Evaluations/"/>
    <id>http://yoursite.com/2019/12/12/Quality-Estimation-for-Image-Captions-Based-on-Large-scale-Human-Evaluations/</id>
    <published>2019-12-12T06:14:06.000Z</published>
    <updated>2019-12-12T06:47:49.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Quality-Estimation-QE-of-image-captions"><a href="#Quality-Estimation-QE-of-image-captions" class="headerlink" title="Quality Estimation (QE) of image-captions"></a>Quality Estimation (QE) of image-captions</h3><ul><li>本文提出了在图像描述领域一个新的问题，Quality Estimation。由于当前的 automatic metric 非常依赖 ground-truth references，因此当一个模型训练好后，若是对一个 unseen images which don’t have gt sentence 进行描述，则无法对该描述进行评价。    </li></ul><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><h5 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h5><ul><li>（1）首先在 Conceptual Captions dataset  上训练多个 image-captioning model （这个数据集会在比 coco上训练的captioning model 更好），captioning model的差异可以体现在 image feature extraction model，object detection提取的object 数量，caption decoder。    </li><li>（2）以上的 image-captioning model 可以为一个image 提供多个 sentence，作者对image 进行了脱敏处理    </li></ul><h5 id="数据打分及处理"><a href="#数据打分及处理" class="headerlink" title="数据打分及处理"></a>数据打分及处理</h5><ul><li><p>（1）这些 image-caption pairs 放到 crowdsource.google上让大家对这些 captioning，进行评价：好、坏或者跳过。每个image-captioning pair 被分配给10个人进行打分     </p></li><li><p>（2）得到收集的 rating image-captioning pairs 之后，对 unique image，将10个评分进行处理， using the equation y = round(mean(ri) ∗ 8)/8.     </p></li></ul><h5 id="QE-Model"><a href="#QE-Model" class="headerlink" title="QE Model"></a>QE Model</h5><ul><li>本文作者设计了两个模型（并把这两个模型进行融合）来处理 QE task。一个是使用到 image-captioning model，两一个是不使用   </li><li>（1）使用image-captioning model：<strong>Confidence-based Features QE Model</strong><br><img src="http://ww1.sinaimg.cn/large/006uWRWVgy1g9txhzr2swj30yc0i642k.jpg" alt="搜狗截图20191212143453.png"></li><li>（2） 不使用 image-captioning model：<strong>Generation-independent Bilinear QE model</strong><br><img src="http://ww1.sinaimg.cn/large/006uWRWVgy1g9txhzmt4rj30xs0apq5u.jpg" alt="搜狗截图20191212143515.png"></li></ul><h3 id="Spearman’s-ρ-Analysis"><a href="#Spearman’s-ρ-Analysis" class="headerlink" title="Spearman’s ρ Analysis"></a>Spearman’s ρ Analysis</h3><ul><li>该文的主要目的就是希望在 没有gt sentence 的情况下，对 unseen-image 进行描述时，可以给出一个caption 的评分。或者是说，该captioning与 人类的描述的相近程度。</li><li>该任务也是希望提出一个 machine learning metric similar to human evaluation （trained-metric），则对该模型好坏的一个的评判就是这个模型给出的评分与人类评分的相近程度。</li><li>predict： 模型对image-caption pair 的评分， Gt:  人类给出的评分</li><li>指标：Spearman’s correlation.  <a href="https://github.com/ShiYaya/spearman-rank" target="_blank" rel="noopener">my github explanation</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Quality-Estimation-QE-of-image-captions&quot;&gt;&lt;a href=&quot;#Quality-Estimation-QE-of-image-captions&quot; class=&quot;headerlink&quot; title=&quot;Quality Estima
      
    
    </summary>
    
      <category term="图像描述" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%83%8F%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="图像描述" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>pth: save in py2, but load in py3</title>
    <link href="http://yoursite.com/2019/12/11/pth-save-in-py2-but-load-in-py3/"/>
    <id>http://yoursite.com/2019/12/11/pth-save-in-py2-but-load-in-py3/</id>
    <published>2019-12-11T06:28:46.000Z</published>
    <updated>2019-12-11T06:38:09.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在torch-load-pth-时出现的问题：UnicodeDecodeError-39-utf-8-39-codec-can-39-t-decode-byte-0xba-in-position-0-invalid-start-byte"><a href="#在torch-load-pth-时出现的问题：UnicodeDecodeError-39-utf-8-39-codec-can-39-t-decode-byte-0xba-in-position-0-invalid-start-byte" class="headerlink" title="在torch.load(*.pth) 时出现的问题：UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xba in position 0: invalid start byte"></a>在torch.load(*.pth) 时出现的问题：<code>UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xba in position 0: invalid start byte</code></h3><ul><li><p>经过网络查询，发现是由于该文件是在 python2 下保存的，但是现在却是在python3下读取，而导致的错误</p></li><li><p>有的人给出了下面的解决方案(但是对于我是无效的)：    </p><p>来自：<a href="https://github.com/CSAILVision/places365/issues/25" target="_blank" rel="noopener">https://github.com/CSAILVision/places365/issues/25</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools import partial</span><br><span class="line">import pickle</span><br><span class="line">pickle.load = partial(pickle.load, <span class="attribute">encoding</span>=<span class="string">"latin1"</span>)</span><br><span class="line">pickle.Unpickler = partial(pickle.Unpickler, <span class="attribute">encoding</span>=<span class="string">"latin1"</span>)</span><br><span class="line">model = torch.load(model_file, <span class="attribute">map_location</span>=lambda storage, loc: storage, <span class="attribute">pickle_module</span>=pickle)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>这里给出我的解决办法</strong>   </p><p>（1） 在python2 环境下读取该文件，然后用 pickle来保存   </p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tmp_data = torch.<span class="built_in">load</span>(model_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'tmp.pickle'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> <span class="built_in">file</span>:</span><br><span class="line">    pickle.dump(tmp_data, <span class="built_in">file</span>, protocol=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>（2）换到python3环境下，再读取pickle文件，再用torch.load来保存（这一点或可以省略）</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'tmp.pickle'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> <span class="built_in">file</span>:</span><br><span class="line">    tmp_data = pickle.<span class="built_in">load</span>(<span class="built_in">file</span>, encoding=<span class="string">'latin1'</span>)</span><br><span class="line">    </span><br><span class="line">torch.save(tmp_data, tmp_model.pth)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在torch-load-pth-时出现的问题：UnicodeDecodeError-39-utf-8-39-codec-can-39-t-decode-byte-0xba-in-position-0-invalid-start-byte&quot;&gt;&lt;a href=&quot;#在t
      
    
    </summary>
    
      <category term="pytorch" scheme="http://yoursite.com/categories/pytorch/"/>
    
    
      <category term="pytorch" scheme="http://yoursite.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>Weakly-Supervised Spatio-Temporally Grounding Natural Sentence in Video</title>
    <link href="http://yoursite.com/2019/12/02/Weakly-Supervised-Spatio-Temporally-Grounding-Natural-Sentence-in-Video/"/>
    <id>http://yoursite.com/2019/12/02/Weakly-Supervised-Spatio-Temporally-Grounding-Natural-Sentence-in-Video/</id>
    <published>2019-12-02T03:36:02.000Z</published>
    <updated>2019-12-03T07:13:39.369Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>ACL 2019</strong></li></ul><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><ul><li><p>image grounding取得了很大的进步，但是将该任务迁移到视频上，需要对视频中的每帧都标注region，这个工程量是巨大的。</p></li><li><p>为了避免这种标注工作的工程量，一些<strong>weakly-supervised</strong> video grouding工作【1】【2】被提出来，他们只提供了video-sentence pairs，没有提供 fine-grained regional annotations。在他们的 video grounding任务中，他们仅仅对名词和代词在 视频的静态帧进行grounding。</p></li><li><p>但是这种 grounding存在问题，比如sentence: A brown and white dog is lying on the grass and then it stands up. 但是帧中出现了多个狗，而我们给出的要搜索的对象仅仅是一个名词： ‘dog’，没有其他更多的信息，来进行更加具体地定位，那么就有可能定位错误。另外只对一张静态帧进行定位，也无法捕捉到object在时域上的动态变化。</p></li><li><p>基于上述的分析，本文提出了一个在video grounding上 weakly-supervised 的新任务：<strong>weakly-supervised spatio-temporally grounding sentence in video (WSSTG).</strong>    </p></li></ul><h3 id="Weakly-supervised-spatio-temporally-grounding-sentence-in-video"><a href="#Weakly-supervised-spatio-temporally-grounding-sentence-in-video" class="headerlink" title="Weakly-supervised spatio-temporally grounding sentence in video"></a>Weakly-supervised spatio-temporally grounding sentence in video</h3><ul><li>Specifically, given a natural sentence and a video, we aim to localize a spatio-temporal tube (i.e., a sequence of bounding boxes) ,（本文中作者将tube 称作 instance）</li><li>yaya: 相比于之前的video-grounding任务，同是 weakly-supervised，但是有两点不同：（1）是句子级别的描述，对要定位的对象的描述更加具体，而不是仅仅是个noun。（2）是要定位出一个 spatial-temporal tube，而不是仅在一张静态帧中定位出一个bbox。</li><li>这两点不同同时带来了优势和挑战</li><li>（1）细节性的描述可以消除歧义，但是如何捕捉句子中的语义并在video中定位出来是一个难题；（2）相比于在静态帧中定位一个bbox, 而是在video中定位一个tube,更能呈现出一个object在时域上的动态。但是，如何利用和建模tube的时空特性以及它们与句子的复杂关系提出了另一个挑战。</li><li>compared with 【2】: different from 【2】，whose text input consists of nouns/pronouns and output is a bounding box in a specific frame, we aim  to ground a natural sentence and output a spatio-temporal tube in the video. </li></ul><h3 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h3><ul><li>提出了一个新任务：weakly-supervised spatio-temporally grounding sentence in video</li><li>针对该任务提出了一个method：提出了一个Attentive interactor利用 tube(instance) 与 sentence之间的细粒度的关系来计算 匹配度；提出了一个diversity loss来加强 reliable instance-sentence pairs 并惩罚 unreliable ones。</li><li>在VID object detection dataset 数据集的基础上，对tube(instance) 增加了description</li></ul><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><ul><li>该任务是 给出一个 a natural sentence query <strong>q</strong> and a video <strong>v</strong> 来定位一个spatial-temporal tube，作者也将这个tube 称作 instance。</li><li>由于是弱监督，因此仅仅只给出 video-sentence pair，细粒度的regional annotations不给出！</li><li>将该任务转为一个 Multiple instance learning problem。给定一个video，首先由instance generator【3】来生成一组instance proposals，然后再根据语义相似性来匹配 natural sentence query 和 instance。  </li></ul><h4 id="Instance-Extraction"><a href="#Instance-Extraction" class="headerlink" title="Instance Extraction"></a>Instance Extraction</h4><ul><li><strong>Instance Generation</strong> ：  先由faster rcnn提取object proposals，假设每帧提取N个proposal ， 然后根据【3】得到N个spatial-temporal tube</li><li><strong>Feature Representation</strong> ：I3D-RGB， I3D-Flow， frame-level RoI pooled feature   </li></ul><h4 id="Attentive-Interactor"><a href="#Attentive-Interactor" class="headerlink" title="Attentive Interactor"></a>Attentive Interactor</h4><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g9io2sodynj30i40hk0v9.jpg" alt="搜狗截图20191202204720.png"></p><ul><li>（1）分别对 sequential visual features 和 sequential textual features 经过LSTM进行编码，LSTM每个step输出的隐层状态作为新的representation，得到新的visual feature 和 sentence representation</li><li>（2）依次以visual feature中的每个隐状态作为查询，以 sentence 所有隐状态作为key 和 value，输入Attention中，则得到了<strong>visual guided sentence feature</strong>。（直观的理解：在给定某一个视觉特征，用attention去分析要关注哪一个word）  </li></ul><h4 id="Matching-Behavior-Characterization"><a href="#Matching-Behavior-Characterization" class="headerlink" title="Matching Behavior Characterization"></a>Matching Behavior Characterization</h4><ul><li>用余弦函数计算 <code>i-th</code> visual feature 和 visual guided sentence features 之间的 匹配度</li><li>对所有的step 加和，则得到instance proposal 与 sentence 之间的匹配度</li></ul><h3 id="Training-Loss"><a href="#Training-Loss" class="headerlink" title="Training Loss"></a>Training Loss</h3><ul><li><p>论文对这里介绍的比较详细，参见论文。</p></li><li><p><strong>ranking loss</strong>： aiming at distinguishing aligned video-sentence pairs from the unaligned ones.  这个损失是希望不匹配的video-sentence之间计算出来的匹配度差一些，比如给网络输入不与该视频对应的句子。</p></li><li><p><strong>novel diversity loss</strong> ：to strengthen the matching behaviors between reliable instance-sentence pairs and penalize the unreliable ones from the aligned video-sentence pair.  这个损失主要是希望对一个video，在计算tube 与 sentence之间的匹配度时，希望不同的 tube之间的差异性（diversity）大一些！</p></li></ul><h3 id="Inference"><a href="#Inference" class="headerlink" title="Inference"></a>Inference</h3><ul><li>一个video 给出了N个 tube proposal，当计算完匹配度之后，选取匹配度最大的那个proposal，然后计算与GT之间的 overlap【4】，若overlap 大于一个阈值，则任务预测正确。</li></ul><h3 id="Yaya-Analysis："><a href="#Yaya-Analysis：" class="headerlink" title="Yaya Analysis："></a>Yaya Analysis：</h3><ul><li><p><strong>此类任务可提升的point</strong></p></li><li><p>更好的 detector来获取 object proposal</p></li><li><p>更好的算法来获取 tube proposal</p></li><li><p>设计算法更好滴计算 sentence 与 tube proposal 匹配度！</p></li><li><p>对 rank loss 给予更多的约束，像此文：提出了一个novel  diversity loss</p></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>【1】De-An Huang, Shyamal Buch, Lucio Dery, Animesh Garg, Li Fei-Fei, and Juan Carlos Niebles. 2018. <strong>Finding “it”: Weakly-supervised reference-aware visual grounding in instructional videos</strong>. In CVPR. </li><li>【2】Luowei Zhou, Nathan Louis, and Jason J Corso. 2018. <strong>Weakly-supervised video object grounding from text by loss weighting and object interaction</strong>. BMVC. </li><li>【3】Georgia Gkioxari and Jitendra Malik. 2015. <strong>Finding action tubes</strong>. In CVPR, pages 759–768. </li><li>【4】Masataka Yamaguchi, Kuniaki Saito, Yoshitaka Ushiku, and Tatsuya Harada. 2017. <strong>Spatio-temporal person retrieval via natural language queries</strong>. In ICCV. </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ACL 2019&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation
      
    
    </summary>
    
      <category term="Visual Grounding" scheme="http://yoursite.com/categories/Visual-Grounding/"/>
    
    
      <category term="Viusal Grounding" scheme="http://yoursite.com/tags/Viusal-Grounding/"/>
    
  </entry>
  
  <entry>
    <title>Finding It: Weakly-Supervised Reference-Aware Visual Grounding in Instructional Videos</title>
    <link href="http://yoursite.com/2019/12/02/Finding-It-Weakly-Supervised-Reference-Aware-Visual-Grounding-in-Instructional-Videos/"/>
    <id>http://yoursite.com/2019/12/02/Finding-It-Weakly-Supervised-Reference-Aware-Visual-Grounding-in-Instructional-Videos/</id>
    <published>2019-12-02T03:23:38.000Z</published>
    <updated>2019-12-02T03:37:20.039Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Learning to Generate Grounded Visual Captions without Localization Supervision</title>
    <link href="http://yoursite.com/2019/12/01/Learning-to-Generate-Grounded-Visual-Captions-without-Localization-Supervision/"/>
    <id>http://yoursite.com/2019/12/01/Learning-to-Generate-Grounded-Visual-Captions-without-Localization-Supervision/</id>
    <published>2019-12-01T04:15:21.000Z</published>
    <updated>2019-12-01T10:47:20.570Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ICLR-2020-under-view"><a href="#ICLR-2020-under-view" class="headerlink" title="ICLR 2020 under view"></a>ICLR 2020 under view</h3><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><ul><li><p>问题：在captioning 任务中，当前的评价指标并不能很好的反应生成的句子与该视频之间的契合度（Groud），有可能生成的句子只是基于在训练过程中学习到的priors（一种统计特性，而不是基于该视频本身）</p></li><li><p>当前模型对于 groud 这个任务，存在的困难：（1）由于当前的 language model 常使用 attention 机制来关注某一个 region，以此来预测下一个生成的单词。换句话说，就是在不知道将会生成什么单词的情况下，却要先定位region， 另外，一篇论文 [1] 提出，attention机制关注的region与人类所关注的并不一致（2）更难的是：传入 attention网络的是 RNN 的 hidden_state，由于 RNN 的记录历史的特性，这个输入包括的是过去所有的信息，而不是针对于某一个individual word。  </p></li></ul><h3 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h3><ul><li>不同于 GVD，该文不使用 annotation bbox 作为监督信号，而是使用了 decoder + localizer + redecoder的结构来自我监督（self-supervision）</li><li>由于其自监督的特性，在一些infrequent word上该文的方法比监督的方法，效果更好</li><li>不仅使用一般的为每个 object class 计算 grounding accuracy， 还提出了一个新的指标：为每个sentence 计算grounding accuracy。</li></ul><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><ul><li><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g9heo6n8glj318k0lp0ze.jpg" alt="搜狗截图20191201183637.png"></p></li><li><p><strong>分阶段训练</strong></p></li><li><p>（1）正常的 encoder-decoder先训练 ~30个epoch</p></li><li><p>（2）在正常的基础上进行添加。 （a）<strong>re-localize</strong>: language_lstm 会得到y1, y2, …, yT 个预测的序列，将这些序列作为attention机制中的 查询向量，赋给每个region一个attention系数，这样就可以在每一个step重构attention系数分配，这样也解决了motivation中提到的问题，即attention是由某一个individual word 而计算得来的。（b）每个step 有了attention对齐之后的attention_region， 再输入到language_LSTM中，得到<strong>再次预测的sequence of word</strong>。</p></li><li><p>在这第二阶段，就是两个loss 交叉熵损失进行权重加和来训练</p></li><li><p>可以发现一个问题，对于visual-words 和 non-visual-words都进行了re-localize。实际上对于，on a 等这类词汇，并不需要在image中找到 grounded region。 该文作者在补充材料里给出了一些额外的实验， eg, 将这些non-visual words 进行抑制，不计算reconstruction loss, 或者给这些localized region representation重新赋给invalid representaion。但是实验表明，在Flickr30 上性能（caption and ground）有提升，但是在 activity上（caption 没变化，ground下降）。</p></li><li><p>但是作者并没有给出分析，我个人总觉得实验设计的不完善，分析的也不多。</p></li></ul><h3 id="Measuring-grounding-per-generated-sentence"><a href="#Measuring-grounding-per-generated-sentence" class="headerlink" title="Measuring grounding per generated sentence"></a>Measuring grounding per generated sentence</h3><ul><li>提该指标的原因：（Such metrics （F1all, F1loc） are extremely stringent as captioning models are generally biased toward certain words in the vocabulary, given the long-tailed distribution of words. ）</li></ul><h3 id="Analysis-Grounding-performance-when-using-a-better-object-detector"><a href="#Analysis-Grounding-performance-when-using-a-better-object-detector" class="headerlink" title="Analysis:  Grounding performance when using a better object detector."></a>Analysis:  Grounding performance when using a better object detector.</h3><ul><li>在 Flickr30k Entities 上进行实验，分析 better detector 对 grounding性能的影响</li><li>（1）使用 GT box (ubrealistically) ，进行实验，发现 caption metric 和 grounding accuracy都有提升</li><li>（2）在 Flickr30k上训练一个detector（之前使用的是在 visual genome上训练好的），进行实验，发现，使得caption metirc下降，（作者分析：由于在本数据集上进行训练，得到的 the ROI features and their associated object predictions 更偏向于 该数据中的  the annotated object words 却不能很好地泛化以预测 diverse captions， 从而导致了captioning 指标下降）</li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>[1] Abhishek Das, Harsh Agrawal, Larry Zitnick, Devi Parikh, and Dhruv Batra.  <strong>Human attention in visual question answering: Do humans and deep networks look at the same regions?</strong>  Computer Vision and Image Understanding, 163:90–100, 2017. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ICLR-2020-under-view&quot;&gt;&lt;a href=&quot;#ICLR-2020-under-view&quot; class=&quot;headerlink&quot; title=&quot;ICLR 2020 under view&quot;&gt;&lt;/a&gt;ICLR 2020 under view&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>vatex_challenge_solutions</title>
    <link href="http://yoursite.com/2019/10/20/vatex-challenge-solutions/"/>
    <id>http://yoursite.com/2019/10/20/vatex-challenge-solutions/</id>
    <published>2019-10-20T09:47:35.000Z</published>
    <updated>2019-10-23T09:11:10.234Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/Qi96kxFRchYEeS854X8dA4REN+sRgh5IItG2WovVZpqDYeuEM4Yf7bo/Gp4tn7SAzKUQL/mSLUcw1gvcFjQ8j4ZjlvY0aB7mytHSteckByOnImihkl4R/ka4gWCgsDJjioAz3MUbObfehzO1vV7ASkBqpFQdcoPWhhe2Im+Y99AKA99FPgY7uZVTSFjkZjmqKlHXsOTzrUizrmspSyDotzkpJtQSJb3F1TlgqVBG7ka2+EftL6eOsSy90+Y13N3UPIh/nPAmO+zCK4Vu5aiE8XKv+6STgU5MxzbY3Hc9Ji+MGYXJnqngNCg968SEXcpX9TkUpuyYUyyXIVIs9+gkp0CJA9WZa+o13BT32AIkhlNpdW+OXf71/rG+BPUD7OCszAzdnNpPEuV4gepbSjPHggNMeninvph6Y/dULeP2roWv6BPXlyAqJEntFUSw52MivrefKn3IXsysENh6FdGpjvP7OrF0+xfe/PuVAE0KMVLGWABuQ7RCujAaJW4E5ZH6gDO6HIxupl65YgKTBErvm8S9Wd0BwVygPbO60vuwPQv6u+VIcb/VEwsS0dIQd5sFGYKTX3Q7tVRfl1w29h8JSjgzvEBjAYkPh1gxMbEKXzHmspD2p3OW8hc0n3YtkACMUQFZjN9dG1jFkSa3SXS4B1VfoP6pKseslIyTJFO9mFlseLrrRv5suUjwQvnSzWc7mMZF4jcWmtWEKl3dDpQQWFpkC0Lu86Enl5zMSq4VMmnq67Zi7pGcXl1bLFgLLM5yyOQHYJBboKcC6qGHa/I6tDs/28oz9D7ol4sjSnX+7dFk5wEsHhcDbByYIZgNNjPBiZa6GqYjnyp3U5l712VboSYbrT/9Sxf7IkW/pBJephitCctqlyIKdCWZSySHbkmHnS90ylPbvvxZe61ZvaFNjLIhVSn10P1Mo1nJ91by4xi2GzLqAmMJro0Eg1tCldpMMVt0tSXsjff/UlYvc9pqPfeR9djgbGsZTfvEu6833iLDfO0ZbxgEz8rbgcc3XYtEyTKeXywNFSxoi/QzseXoDxHM1xebxGSI7mmlwbABqBfmHv9pHvtwIKJVtzsk9heVGw7qBlu1uVoJx6aFRBVTFiow4Cc9MgOSKXDv8OjlhtxgWXcj4sOfl3Stms3nVKKlN3t0Rwkx5NbgT8Ai/YmhbdaTZ3QF3NiP2gcfgUdN2YH1i0E0cqyUCnxuOUHZHADhUOdvzGRcz778chd9N6gvSTKMuWOsqSsRRGvygODeXGDv/pdjeJkGxNpVGu11ki2Zuk0/GaCuzmGEAo71JpHtzJOyCU9ijE+hV2m2wT1KwYb7gCjGsJAV3dfVJnuwF7+b0XUouktUYBFtAB1WBlj9MyI+QWoIqRjmBpjJhor+vkfl+t9xAjKYUrsT0juIKhh9+3jhn6vjVIXQ4CiDzqq1wq3L5nYiAU90Rjda9soH3eZ6193ZhzZyscRx7DLbfdAM08U08aiHV7Vdl2WC1MN4KeCa04cvcKaEjHhbpKlZK+1P1CeqlOy9+Ks3zR7FoTB984z0AKn6uKHYFPR6n90NQzjAvXl8hrT3XlWJ6LvXyI3U8kafTSMCIsOpTcJUdevkKGv2bDBnco1w6ySngMMUXrklCyR4Dke7lmu8c7bMxylIItveU4ADpJ+a8yi6YKdusjSfIT8w3b0PFAHV03jqvJQh4NcLh8mO21q4Ulhbb90soj5cDyb1APreEyR9naWELjs/KvnZMi4vSHjF6+EGBTzdgsFz/c6EBuo57VGuRIjd3KzoqKIJSxaZhXWwB4mGYz+Ni4UoRAHtzf9PT1jEWEjeZlikdaIl0RUFlP+giq3QcM3dGkZY5VSb2PzKTqVftFQ7vCQPbj1O23fWwvsrqle6YH9QymrW8vZKZurw5LJDxfy9Q13POF+g3wB9IPGCmqwNc019L27O3I6j92z+z3E+nwfeio544m7ljdFuFsOIc0ZaEAPxQclP2Bga3Atj+axulS8jhE68oSnRC13qiSPNZvDuevxAFOkVBfYn7sJuwey3vLly2oUiOk1TlrtuqLKbPanj9+avMV1xjuYML1fQcY2n9PNa7nC+YOJgpveIhsWVbFUJL16WZRKN349J9gMin3GVXeEPetaQvxhakLDOuyESfwMut5DHJ2xLPd2bBVCj9fmNcOiRL8sD9RrJUcPWwsqNhfzwupW8GScC70Q+kEbmW7kYbFExD0J7DM6erHoTLQ2Fzn5tbw9W3i4dhFnn1zDmWBdOI9IM8z5XuN75orFV0naC/YquHqQei3OMH1fpgHy8cAmPI2ALk5QcpAmuK0pvOx6O0HXloRQr1epc8wSIT0ao1v5UsxLOXrPY9PznM/UTGYp+6UNZIhh33GnCdx8NhXnoW9/8Z7+dnvet0n21otBQ6W2Ra+YDKD3DEIoiuSCsJtPLOU3ZzSPfbCJgQTxmAwlDMKYic5oes1ObXbr3O0zsEcX8Dw0i1dpXtBfBWRJRdVz1H4F8ZqP122kduiDxeAOntQDd/hwE7NStN21LpeJc6t+3knU2iYLMoJoi5Ll1Al+4jmQ3XshWx/xMYyrtpUdPXlqoJetkKZBuZtFSz2+mzGYjqOuCF/p885npXosw9qfWUKItEkoIWwB1BGPGLd+IJK4BHksF5MIW8N0prm4fiaT46GwQce88U+9N9ptVZ42mV+exCjGA1KsPNBijaFfHFku5A7jYS5vvRQYvJyFoqUEYvzchQod7GtzocGsDhFUVqI8jE2fX25bCuGlMa8NRh7UZiE4EXIIt0Xi2QhFVbN0NKqAj4I1EczugyTtv2P0Af3W+RfSY5qHhfEx1QK4lbsGhMBoc4y6pVkiskG9FZYxiCyVfDRUuXn7WpUYXR6+Zdn5qIy3tW+EnhjolHR4Bjr1b0LJmWZCNX3TRPWSns8hVBGM5JVsx4frVj675GEjqVeBsxXsiEZwx/g9/KE+y9aSG/w0Tevyf+rr0v1/r4YvtyPTAkxUKFva6Dad7lWEpgGhdBlFE0hcwRPC0iV8y9e578YU/0o6+xSKNQkh6eYoWAFaCrQsmXlBAhLuwyQHuqbvMQtcHKXZJep5OvBdQbZ4NzrF4/LW16zSFJhnrWyoienZeXXz4KOR6M6BVex89uFn7dcHppYOUamaxQOQQWGd8pE1BPi/zDJcpSIWKueUUFyS/13ArkuIZX4C7FrBYXk1Qwb2MgIUKpUbPcMzPEcLmBrISJmmPlGbAc1GaawSpMPOdHQipl6g9JNg/oKuygObsYG/G0rRepNjv0ZQbPW8FTUbnlX0M+RBpkXQMxw672hz0Qht3mTbFSeY+pBZyhWfhxQ19419YZetqVt3S91aOq+ChnlUUhGd/FkqEe1zj7s4VwIPHe1dlydzloiyr6EShh2NkfdbLmB0ajvZhdEO4pTbqMVgH+0Sv0z8ZWJg/2g3xhODaGK524pP6O7dPsVWaR47n91a9vHTHnUVvrt1emTXtu3TaOOpXiGPE4higGZ2TKcVFQZCw0wkyZbBWGDJI94x7524+b6XXzlsWakbrBZB6+VUINrPcOsqnPitZAbC32yulosZ56zGsallSzK4k0KKVMfygfZMRgwD1LuKgbtsk4fpqoRy3ZLaAQXFtWVdTpZ6WwvGStyHp4mddf7cHJOvTXQz3HAV3PT8NDNKTHNoamjY8GLOLzyGjFoZWlgtO8Nt2gE9yCQaCqX45mfG91sq1WAeX+6UICLLDVAEjTdcGxbyopMLfwLZZjrpUfXO7pM4/VGClsV231AIlYhearQ9YtOt1b4yFsZ13oBFC8Cdpghlu0IzK0PGn3mSNueC49J3TfBsoHeiCSmUcpvMzO0kIPn6bl42aVS9KJdC6lJS3lSpz5JI38rsPEaG5xOmMQhp6sib0HpOkxfvXzehLLNFQvdS4gGQaFg9AfsdV0X9kuJXF40uxIJGRe0IPL6g9frseZbKrrI5LuCQY4E1b+e/EUAppB/GZ9P1SHvYTygX1LSKHAzN9ENCnivsZRbbWEpiOL1ycRfd78jk7o1jBqH+lsQaXJ/TNclARhFM03JshM0uzZbXf1ICkLsVWe1/Qn1eQdjRaekAGngW5cNsnJ4Yda059pCZxu7UkOlIUbwvO3iGdJky0rGeh3HiD+tS3ibOdAfi+mjwi6HNU53zp38LE/Vb0nJFCXW/oOn808YLfdQsA2cUO2K/j88PATnbrXNgQv5gWf/snU6Fq0kpQqxT8vk1vxUgmCyVhuAvKMRh+ckyVXUsu+Hk2dDb+n0YsaFmpt5WNlU4xKN+o7k0U/VJ/T1p8ol3qXZXDvpg4X/44N9VVKwu+55P1WXzKcg/g7vI0dby2hbWlmoDZvHYWWywb8zOPpxaJeHVqtXlSk4xkk/lYwGi1gvOCL1w58//slHmqOJWl9lmWcT7ZCS4fjGkMBGCbTFQ3SxwURmNoNzeAWpeje8+BLH++ztdLEOyd6VdduobDsK3oaFtYFwmNERmLdPBMy6nW9m9IUvSOi0V8hrQhU61+FBTkO23SpyX7FYZWoDwMl7DZJfWi9l8a5Vqu0wSKhd8/+xnq7Hp9JfExcwhCj60w9e9zUCWjDuiTW9DgaxsOI2g6uKMK5zej8OTeUK732ZjlPffaRPH6SDcGsZLGskY3Eku0Knlvpv3qXDuS+fbf9Tb1RnEoYPsoKNqycQ0I+JLrxA78Uhw/TdqVVQboJTq7ql2eskqFFudTI370sJ+R6NFHw1sUCY3Mb3XoDo2/UP4ChYDicUTlNyjXqxGxibGDS8B/s2v+3jZkO2CKe1E67RKGVUT5S12OZ2DF4A2S79MC/HLW6PB1YbqaCNPPtuHAMTrG5QizdItLBxDNoD89vQyVOJRB8JYtbTYBPb2JU3L1G5ekqAQLeqTgss9RBBHy0Sr64WRnkuL1OZg7jnE6jrYoNYGwRvXqMtPpBDxx/m+DaK6FM7lSTdrzFpJ7sLbgzZLOO+msbX1SMuLXRUTyjIMRBKZBVs7yErYv42Q96piBBR4+YZEFy+NEatYXwwDFZZabyEDzBWQD4+2I6Ip5k1rNotfrHRsEHRA9DlhlwIA1IXcBJMfApcWMWnWeX36z2Bz387yN0l1jW/2HR3nzl1LPgzeUCLOnX7zOoJzWXpya56ijPvFTGLWvEcUW6J7s+BcI/YrW4sdoq0x9N8EB/dLNCw9nbs5n8i7sjul9fEQYkb++cRS+mattk2vVpVLx1IHW3BWsPfMHvuUNF9T50UXFBXqlCaB9me0YcPvID9StVIzXBIh/swf7/B7plMItpI9I/1UPL0XiDE2vjEqD6Ko2jZsiDC5pf2jTc6nIgKYNjP2m0JcBpNXy7G2k5LtISRAofnccnGLd5Piy8Cfe3/FDGuc0YAqZy0Lq22dvhhSSVjj7DXs6apGs3DDa2UMAkdWaiMwoxgJHI8p00+6iTPd25kz0uXWTWH7Grzu5prS3pW36OXA9VYhLGkrSxlGfnnrP1yQ/qY82+elFgAiLPNL5mroiSFyWMxKk1OZZKwMj+I1ULmWSGHYB6AHRNwkuJL2yGWnD7qaf+vxFdDMxiWlq5KAW8oYiDKfM8uYi/P2W8TAeobtY+9ml6l035BIVH6stV+0lXAfZqnpNR5JPJepQGe+aiDmtX0yFtId6XvStQlkyxgaiT/ihxKWwzkxUlUOxOvhV1YU1hTaLSVbA6C3iiQdmllyM2Qz5BydkHeRaam0T08yJYL0wd0pg4y91GnQ8v6cuskdhb8SbgVRqUx3AT4qAwmYYAeTv3VR0uru6h7YlNnUAtxmZMp+dwN3xKdA41tzw1nWw/VKD1ZpW+Cr4yZuIMibxax+gg3EYSUgu8qUQ3ILwDQQfhw4mTOSjVgBhnFYkLw5ld++fM2MqTyYVO3g1daujyPqKuWC8wjBkOaOpWzGOoagZ093iKJwHW3Vt0U/Mxq3RauacaigJWGDfzb9/HSv5EHzxDyHXAXE1FjzSerVdcj56vJNVUcUBbyFd7YoHYlMG3mHgOoNuTr4xFn5NDrUksL3DN6D9GtbEbSB2ClsKwUM6h75+KnhttY3M/ZMibeSJmsPAT17RilvQtPp+kMPpRSDN8IRkQpPVwq0vX5tUOTEp/Dlwi9J//CNPW000cVsYZCMrd2iicpSc4AaydT85DfMUomoBtIH90FaPL/u/2VVZeLHUVNvFKsbFjza7ZSCbawQNYr3iZbOjQpjByLOgGLnKRUEo02bUh+XOx6mKCQgQk0hMbebpQhPeJfaEFfpBx0wtKSSV0lVzit/EAO/kcak8ZzxB20I71UMyx35uMT7eFNknR+kWEInjuh5gsJ3DlwVma0URqIOn6uZnr8DRX8P4NtPgkpnZ3ZsnbY2wRF4aGIFZhbFixdzvmi40+ouPc/whbh+r6wPD+M3qhLS+GydB2z2VoOZoCiU4zjoFrTmVLHBX+vinTKQhkayYQiy0QOb72bO9M/ECNVM+0Luxl6Z3AIsi2DHEWY36oKSaeLXzEPjMOwve3tD2R8iqaJgMppKFuHgjwZ+SvbDJ/KpUKlpIaDokTVv7suFAstAyzyRlF27CxXQ5+4s4WQOACEqKYDHFTHoSOWLUGc7zNcR/GWha1zi8sw6cbsDj63NVJ4hhH6XMaeDvsUq1BVLHH6d9ehylAuNxEmQqwmKbE9hVr7dHmQk93YMHAQRAAnjvMvg1116wfxCLFdLhTOqQ3ALdZIODv3sZ8IYotbvY8qdNq8QYpWrxBUHv6vkFVlFXWiO1fV+RJpDieeqk1KtCzUVHhySWQdf1jXOmwd/tBrnZlpopSg20I7kRH2jhHQ1bAM63ZkwaAozDynQMgbouogj7V98H3gFWG4gYbPZ0pbEhqGa7nVBbZAtX0/BZB/VOSpmXNAAOEdql2OqyM788AVATHCSEc9SpyVCNy/aJM3B7Mh7/Vjet9UNCGvnkNM6I+pAXwg/X+elJbuOYmxE2+s+0ji2iUyPVWZfcrmyL3CZRY3k7r6V6+lqhopZ0CAxrmy6ovMZWJvezTwSzzS1HfXTMVrre7HTDn91xAES7GK0QVcrb51YCm94V7787FiRV9GfZH0kkbzN4eXNrIZL1+Baqbh9F1G/kpvXvPmGVZRxlidPYHV9YQYwYxbRYLreXuNkTbCZBSbEJX1Ur7SciZD07UBkpxYeLzSHKIb6zW5wXpW+Vz4I4QsutMjnNOL/uaC6bhzAe4F+NQ1/wKnwvoDdV0hBLZeIKQv26rXGRaR1u6yVTxl2vlS5nyc9CHBDx9kEiDSoK5qJeFtZVO1nw6kJRQu6AlDdK3tnDPs+c72Iqm/sIXrxCezU2DpK+CdPL6mhEfksQT0qeShSUdAUxqH+g4jX5R2v2Xk8wZqIi0pJxS4kc1mlaVziv0xkW+rjKU6DnTRbiApZ2xwkQ7oU8QlQgjHlCxWQzObwyVtTWMaZ9rh2O2rWPNNpHSoatuYlKynWQgdS3Q10keXgNKH1Up7jv8y0IYrBG0pAepLaWHbtoa08iz4E3P6gYojw==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>pytorch 索引 切片</title>
    <link href="http://yoursite.com/2019/10/10/pytorch-%E7%B4%A2%E5%BC%95-%E5%88%87%E7%89%87/"/>
    <id>http://yoursite.com/2019/10/10/pytorch-索引-切片/</id>
    <published>2019-10-10T07:57:21.000Z</published>
    <updated>2019-10-10T08:06:42.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="给出：四维张量，三维的索引。根据索引得到张量中对应的数据"><a href="#给出：四维张量，三维的索引。根据索引得到张量中对应的数据" class="headerlink" title="给出：四维张量，三维的索引。根据索引得到张量中对应的数据"></a>给出：四维张量，三维的索引。根据索引得到张量中对应的数据</h2><ul><li><p>四维张量，object_feats.shape = [bs, 28, 5, 1024]。一个video中截取 28帧，每帧提取5个object, 其特征向量维度为1024</p></li><li><p>三维索引，traj_idx.shape = [bs, 28, 5]。以第一帧 frame上的 5个object 作为anchor，找到以该anchor 作为开头的轨迹（即，在其余帧上的对应的objects的索引），</p></li><li><p>目标：由索引，提取对应的 object feature</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traj_feats = object_feats.gather(<span class="number">2</span>, traj_idx.unsqueeze(<span class="number">3</span>).expand_as(object_feats))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;给出：四维张量，三维的索引。根据索引得到张量中对应的数据&quot;&gt;&lt;a href=&quot;#给出：四维张量，三维的索引。根据索引得到张量中对应的数据&quot; class=&quot;headerlink&quot; title=&quot;给出：四维张量，三维的索引。根据索引得到张量中对应的数据&quot;&gt;&lt;/a&gt;给出
      
    
    </summary>
    
      <category term="pytorch" scheme="http://yoursite.com/categories/pytorch/"/>
    
    
      <category term="pytorch" scheme="http://yoursite.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>使用 objects position 作为特征的论文</title>
    <link href="http://yoursite.com/2019/10/10/%E4%BD%BF%E7%94%A8-objects-position-%E4%BD%9C%E4%B8%BA%E7%89%B9%E5%BE%81%E7%9A%84%E8%AE%BA%E6%96%87/"/>
    <id>http://yoursite.com/2019/10/10/使用-objects-position-作为特征的论文/</id>
    <published>2019-10-10T02:10:41.000Z</published>
    <updated>2019-10-10T02:25:11.330Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>对分类损失的优化</title>
    <link href="http://yoursite.com/2019/09/23/%E5%AF%B9%E5%88%86%E7%B1%BB%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2019/09/23/对分类损失函数的优化/</id>
    <published>2019-09-23T14:13:58.000Z</published>
    <updated>2019-09-23T14:13:58.675Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>视频描述评价指标的分析</title>
    <link href="http://yoursite.com/2019/09/21/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%E7%9A%84%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/09/21/视频描述评价指标的分析/</id>
    <published>2019-09-21T08:50:01.000Z</published>
    <updated>2019-09-22T03:04:49.546Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>Neural Motifs: Scene Graph Parsing with Global Context</title>
    <link href="http://yoursite.com/2019/09/18/Neural-Motifs-Scene-Graph-Parsing-with-Global-Context/"/>
    <id>http://yoursite.com/2019/09/18/Neural-Motifs-Scene-Graph-Parsing-with-Global-Context/</id>
    <published>2019-09-18T06:41:36.000Z</published>
    <updated>2019-09-19T06:51:05.187Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><ul><li>给出了一个对 repeated structures 的量化分析</li><li>分析显示，（1）由object label对预测 relation label是有效的，但是反之却不成立。（2）在一个image graph中会出现重复的模板（eg：大象有耳朵，大象有鼻子，  XX has YY）</li></ul><h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><ul><li>给定 object feature 和 object label 来去预测 relation label</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给出了一个对 repeated structures 的量化分析
      
    
    </summary>
    
      <category term="场景图解析" scheme="http://yoursite.com/categories/%E5%9C%BA%E6%99%AF%E5%9B%BE%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="场景图解析" scheme="http://yoursite.com/tags/%E5%9C%BA%E6%99%AF%E5%9B%BE%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>video captioning 任务的难点？</title>
    <link href="http://yoursite.com/2019/09/07/video-captioning-%E4%BB%BB%E5%8A%A1%E7%9A%84%E9%9A%BE%E7%82%B9%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/09/07/video-captioning-任务的难点？/</id>
    <published>2019-09-07T06:59:20.000Z</published>
    <updated>2019-09-21T08:48:23.866Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>视频描述任务中用到objects的论文总结</title>
    <link href="http://yoursite.com/2019/09/01/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0%E4%BB%BB%E5%8A%A1%E4%B8%AD%E7%94%A8%E5%88%B0objects%E7%9A%84%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/09/01/视频描述任务中用到objects的论文总结/</id>
    <published>2019-09-01T13:44:12.000Z</published>
    <updated>2019-09-02T14:25:17.670Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>CVPR 2018</p><ol><li>Fine-grained Video Captioning for Sports Narrative</li></ol></li><li><p>CVPR 2019</p><ol><li>Grounded Video Description</li><li>Object-aware Aggregation with Bidirectional Temporal Graph for Video Captioning</li><li>Spatio-Temporal Dynamics and Semantic Attribute Enriched Visual Encoding for Video Captioning 【再去读一遍】</li><li>Adversarial Inference for Multi-Sentence Video Description</li></ol></li><li><p>ACM 2019</p><ol><li>Hierarchical Global-Local Temporal Modeling for Video Captioning</li></ol></li></ul><h3 id="Grounded-Video-Description"><a href="#Grounded-Video-Description" class="headerlink" title="Grounded Video Description"></a>Grounded Video Description</h3><p><img src="https://i.loli.net/2019/09/02/Hvtk4BJVNQ2WwdM.png" alt="搜狗截图20190902104324.png"></p><ol><li><p>如何使用region feature？</p><p> 仅在language lstm 用到了 region featrue, attention 加权求和之后 与 cat[ fc, motion] features 对应元素相加（cat[fc, motion]也是在经过attention加权求和之后的）</p><p> 但我个人认为对应元素相加，并没有道理，相当于在 cat[ fc, motion] 的基础上增加了一个 bias，没有什么道理</p></li><li><p>region feature 的构成？</p><p>R：是 object detector  在 fc6 输出的 feature</p><p>Ms(R)：是 object detector 在 fc7 输出的feature (这里有一些细节的修改，具体见论文)</p><p>Ml： 是 position embedding</p></li></ol><p><img src="https://i.loli.net/2019/09/02/y4JkxlmLQpqaj5c.png" alt="搜狗截图20190902105022.png"></p><h3 id="Object-aware-Aggregation-with-Bidirectional-Temporal-Graph-for-Video-Captioning"><a href="#Object-aware-Aggregation-with-Bidirectional-Temporal-Graph-for-Video-Captioning" class="headerlink" title="Object-aware Aggregation with Bidirectional Temporal Graph for Video Captioning"></a>Object-aware Aggregation with Bidirectional Temporal Graph for Video Captioning</h3><p><img src="https://i.loli.net/2019/09/02/TIP7Ww3FnLNKzvu.png" alt="搜狗截图20190902144125.png"></p><ol><li><p>简要介绍本文的结构</p><p> 在encoder 部分，使用 object feature 和 frame feature，分别经过设计的VALD 得到更新的特征向量</p><p> 在 decoder 部分，对object feature 使用两层的attention, 先对 <strong>一个轨迹</strong>上的objects 进行attention 的加权求和，再对N different objects instances进行 attention 的加权求和，这样就可以得到对所有objects 的聚合表达</p><p> 轨迹：对于第一帧的ojects, 根据相似性分别去找其他帧与其对应的objects，而构成的时域轨迹。</p><p>  这里采用了前向轨迹，和后向轨迹两种，在decoder 输出预测的单词之后，进行融合。</p></li><li><p>如何使用region feature？<br> 仅有一个lstm ，在输入lstm前对objects features进行两层attention 加权求和后，与同样经过attention的frames feature进行加和（sum）。<br> 本文没有使用 motion feeture</p></li><li><p>region feature 的构成？<br> 非常简单，只有 appearance feature，但是经过了 obejct VLAD module！</p></li><li><p><font color="#0099ff" size="5" face="黑体">object feature 的 hierarchical attention 值得借鉴呢！<br>计算object 相似性的部分也不错</font></p></li></ol><h3 id="Spatio-Temporal-Dynamics-and-Semantic-Attribute-Enriched-Visual-Encoding-for-Video-Captioning"><a href="#Spatio-Temporal-Dynamics-and-Semantic-Attribute-Enriched-Visual-Encoding-for-Video-Captioning" class="headerlink" title="Spatio-Temporal Dynamics and Semantic Attribute Enriched Visual Encoding for Video Captioning"></a>Spatio-Temporal Dynamics and Semantic Attribute Enriched Visual Encoding for Video Captioning</h3><p><img src="https://i.loli.net/2019/09/02/T5AzpW8DHkVL2Oy.png" alt="搜狗截图20190902152617.png"></p><ul><li>此文没有太看懂</li></ul><ol><li><p>如何使用region feature？</p><p> 得到 obejcts sematics embeddding 一起其他三个信息，经过聚合之后得到特征向量v，再经过一个线性变换得到v，再送入decoder中</p></li><li><p>region feature 的构成？</p><p> 由 object detector 输出的特征，以及其他输出（objetcs 存现的频率、概率），来构建semantics</p></li></ol><h3 id="Hierarchical-Global-Local-Temporal-Modeling-for-Video-Captioning"><a href="#Hierarchical-Global-Local-Temporal-Modeling-for-Video-Captioning" class="headerlink" title="Hierarchical Global-Local Temporal Modeling for Video Captioning"></a>Hierarchical Global-Local Temporal Modeling for Video Captioning</h3><p><img src="https://i.loli.net/2019/09/02/m5xLQnzCJGsjWVc.png" alt="搜狗截图20190902161552.png"></p><ol><li><p>如何使用region features ?</p><p> encoder 部分由两层LSTM，第一层LSTM 构建 frames features 和 c3d features的 隐层状态，并送入第二层LSTM，</p><p>在第二层LSTM 的每一个step, 都对该step 对应帧上的 objetcs进行attention 加权求和，并送入LSTM中，得到该帧的objects 的聚合特征的隐层状态   </p><p> <img src="https://i.loli.net/2019/09/02/q6XNP8iSVzekyCE.png" alt="搜狗截图20190902165813.png"></p></li><li><p>region feature 的构成？</p><p>   每帧 objects features 的加权求和，再经过LSTM得到隐层状态</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>当前基于 objects feature 的论文，decoder 部分没有太大的新颖（一般都是Top-Down或者是 Soft-Attention），主要的新颖的地方是在 encoder 部分</li><li>encoder部分有的使用LSTM 以及attention 来更新 objects features；有的使用VLAD 来构建 行为特征，使用 objects 的时域轨迹和两层attention 来聚合特征；使用objetcs 的其他信息，比如 position 以及 label 等信息</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;CVPR 2018&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fine-grained Video Captioning for Sports Narrative&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CVPR 2019&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Grounde
      
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>目标检测模型中的性能评估——MAP(Mean Average Precision))</title>
    <link href="http://yoursite.com/2019/08/31/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E2%80%94%E2%80%94MAP-Mean-Average-Precision/"/>
    <id>http://yoursite.com/2019/08/31/目标检测模型中的性能评估——MAP-Mean-Average-Precision/</id>
    <published>2019-08-31T01:41:03.000Z</published>
    <updated>2019-08-31T01:43:06.273Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/katherine_hsr/article/details/79266880" target="_blank" rel="noopener">https://blog.csdn.net/katherine_hsr/article/details/79266880</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/katherine_hsr/article/details/79266880&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/katherine_
      
    
    </summary>
    
      <category term="目标检测" scheme="http://yoursite.com/categories/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="目标检测" scheme="http://yoursite.com/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>多标签图像分类任务的评价方法-mAP</title>
    <link href="http://yoursite.com/2019/08/31/%E5%A4%9A%E6%A0%87%E7%AD%BE%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%AF%84%E4%BB%B7%E6%96%B9%E6%B3%95-mAP/"/>
    <id>http://yoursite.com/2019/08/31/多标签图像分类任务的评价方法-mAP/</id>
    <published>2019-08-31T00:44:47.000Z</published>
    <updated>2019-08-31T01:44:17.241Z</updated>
    
    <content type="html"><![CDATA[<p>转载 from: <a href="http://blog.sina.com.cn/s/blog_9db078090102whzw.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_9db078090102whzw.html</a></p><p>多标签图像分类（Multi-label   Image  Classification）任务中图片的标签不止一个，因此评价不能用普通单标签图像分类的标准，即mean  accuracy，该任务采用的是和信息检索中类似的方法—mAP（mean  Average  Precision）。mAP虽然字面意思和mean  accuracy看起来差不多，但是计算方法要繁琐得多，以下是mAP的计算方法：</p><p>首先用训练好的模型得到所有测试样本的confidence  score，每一类（如car）的confidence   score保存到一个文件中（如comp1_cls_test_car.txt）。假设共有20个测试样本，每个的id，confidence  score和ground  truth  label如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQd58yJ15f" target="_blank" rel="noopener"><img src="http://s16.sinaimg.cn/mw690/002T2ChPgy6XQd58yJ15f" alt="img"></a> </p><p>接下来对confidence  score排序，得到：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQd86isc4c" target="_blank" rel="noopener"><img src="http://s13.sinaimg.cn/mw690/002T2ChPgy6XQd86isc4c" alt="img"></a><em>这张表很重要，接下来的precision和recall都是依照这个表计算的</em>﻿</p><p>然后计算precision和recall，这两个标准的定义如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQdjij4Ae8" target="_blank" rel="noopener"><img src="http://s9.sinaimg.cn/mw690/002T2ChPgy6XQdjij4Ae8" alt="img"></a></p><p>上图比较直观，圆圈内（true   positives + false  positives）是我们选出的元素,它对应于分类任务中我们取出的结果，比如对测试样本在训练好的car模型上分类，我们想得到top-5的结果，即：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQdbTpla5c" target="_blank" rel="noopener"><img src="http://s13.sinaimg.cn/mw690/002T2ChPgy6XQdbTpla5c" alt="img"></a></p><p>在这个例子中，true   positives就是指第4和第2张图片，false   positives就是指第13，19，6张图片。方框内圆圈外的元素（false   negatives和true  negatives）是相对于方框内的元素而言，在这个例子中，是指confidence   score排在top-5之外的元素，即：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQdcMwKCea" target="_blank" rel="noopener"><img src="http://s11.sinaimg.cn/mw690/002T2ChPgy6XQdcMwKCea" alt="img"></a> </p><p>其中，false   negatives是指第9，16，7，20张图片，true   negatives是指第1,18,5,15,10,17,12,14,8,11,3张图片。</p><p>那么，这个例子中Precision=2/5=40%，意思是对于car这一类别，我们选定了5个样本，其中正确的有2个，即准确率为40%；Recall=2/6=30%，意思是在所有测试样本中，共有6个car，但是因为我们只召回了2个，所以召回率为30%。</p><p>实际多类别分类任务中，我们通常不满足只通过top-5来衡量一个模型的好坏，而是需要知道从top-1到top-N（N是所有测试样本个数，本文中为20）对应的precision和recall。显然随着我们选定的样本越来也多，recall一定会越来越高，而precision整体上会呈下降趋势。把recall当成横坐标，precision当成纵坐标，即可得到常用的precision-recall曲线。这个例子的precision-recall曲线如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQddBz7ze9" target="_blank" rel="noopener"><img src="http://s10.sinaimg.cn/mw690/002T2ChPgy6XQddBz7ze9" alt="img"></a></p><p>接下来说说AP的计算，此处参考的是PASCAL  VOC  CHALLENGE的计算方法。首先设定一组阈值，[0, 0.1, 0.2, …, 1]。然后对于recall大于每一个阈值（比如recall&gt;0.3），我们都会得到一个对应的最大precision。这样，我们就计算出了11个precision。AP即为这11个precision的平均值。这种方法英文叫做11-point interpolated average precision。</p><p>当然PASCAL VOC CHALLENGE自2010年后就换了另一种计算方法。新的计算方法假设这N个样本中有M个正例，那么我们会得到M个recall值（1/M, 2/M, …, M/M）,对于每个recall值r，我们可以计算出对应（r’ &gt; r）的最大precision，然后对这M个precision值取平均即得到最后的AP值。计算方法如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPzy76AuWjHOp29" target="_blank" rel="noopener"><img src="http://s10.sinaimg.cn/mw690/002T2ChPzy76AuWjHOp29" alt="img"></a></p><p>相应的Precision-Recall曲线（这条曲线是单调递减的）如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPzy76AuH9Z6010" target="_blank" rel="noopener"><img src="http://s1.sinaimg.cn/mw690/002T2ChPzy76AuH9Z6010" alt="img"></a></p><p>AP衡量的是学出来的模型在每个类别上的好坏，mAP衡量的是学出的模型在所有类别上的好坏，得到AP后mAP的计算就变得很简单了，就是取所有AP的平均值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载 from: &lt;a href=&quot;http://blog.sina.com.cn/s/blog_9db078090102whzw.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.sina.com.cn/s/blog_9db
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>到底ResNet在解决一个什么问题呢</title>
    <link href="http://yoursite.com/2019/08/17/%E5%88%B0%E5%BA%95ResNet%E5%9C%A8%E8%A7%A3%E5%86%B3%E4%B8%80%E4%B8%AA%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%E5%91%A2/"/>
    <id>http://yoursite.com/2019/08/17/到底ResNet在解决一个什么问题呢/</id>
    <published>2019-08-17T02:21:24.000Z</published>
    <updated>2019-08-17T08:17:14.288Z</updated>
    
    <content type="html"><![CDATA[<p>对知乎上回答的简单总结</p><hr><p><strong>一、引言：为什么会有ResNet？Why ResNet？</strong></p><ul><li><p>过拟合？<br>  不是！因为深层网络表现为训练误差和测试误差都比较高，所以不是过拟合</p></li><li><p>梯度消失？梯度爆炸？<br>  不是！因为已经使用了 batch normalization ，在很大程度上解决了梯度消失、爆炸的问题，（yaya：我个人认为对梯度消失问题有一定的帮助，毕竟梯度值为1）</p></li><li><p>深层网络退化的原因？</p><p>  由于非线性激活函数的存在，使得信息被丢失，而不能完整保留，所以，应该在网络中加入恒等映射</p></li></ul><p>*<em>二、关于resnet网络结构 【没看懂为什么要有两层】  *</em></p><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g62hrnrs6nj30h9048aax.jpg" alt></p><ul><li>yaya 分析：<br>一层：  relu(x +  w1 x)<br>两层：  relu(x +w2 relu(w1 x))</li></ul><p>​       既然非线性激活函数会把信息丢失，为什么不这样：relu(wx) + x ，因为这样是错误的，本身relu是需要放在输出后面，起到非线性的作用，但是这样，就不算作对输出的非线</p><p>*<em>三、更多的理解    *</em></p><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g62hpvudvxj30iu0cc3zi.jpg" alt></p><hr><p>yaya 的总结/理解</p><ol><li>resnet 解决的不是过拟合的问题，因为过拟合的现象是，train loss 小，但是val loss大，但是当前深层网络的问题是train loss大，val loss也大</li><li>resnet 提供了一个梯度为1的反向传播，在一定程度上解决了梯度消失的问题</li><li>FPN中指出，不同深度的网络的结合可以结合不同的分辨率，但是当前resnet 只跨越了一种分辨率，因此，没能很好地利用这一特点，因此desnet便被提出来</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对知乎上回答的简单总结&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;一、引言：为什么会有ResNet？Why ResNet？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;过拟合？&lt;br&gt;  不是！因为深层网络表现为训练误差和测试误差都比较高，所以不是过拟合&lt;/p&gt;
&lt;/l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解Batch Normalization批标准化</title>
    <link href="http://yoursite.com/2019/08/15/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Batch-Normalization%E6%89%B9%E6%A0%87%E5%87%86%E5%8C%96/"/>
    <id>http://yoursite.com/2019/08/15/深入理解Batch-Normalization批标准化/</id>
    <published>2019-08-15T10:41:21.000Z</published>
    <updated>2019-08-15T10:43:29.239Z</updated>
    
    <content type="html"><![CDATA[<ul><li>转载 from：<a href="https://www.cnblogs.com/guoyaohua/p/8724433.html" target="_blank" rel="noopener">https://www.cnblogs.com/guoyaohua/p/8724433.html</a></li></ul><blockquote><p>这几天面试经常被问到BN层的原理，虽然回答上来了，但还是感觉答得不是很好，今天仔细研究了一下Batch Normalization的原理，以下为参考网上几篇文章总结得出。</p></blockquote><p>　　Batch Normalization作为最近一年来DL的重要成果，已经广泛被证明其有效性和重要性。虽然有些细节处理还解释不清其理论原因，但是实践证明好用才是真的好，别忘了DL从Hinton对深层网络做Pre-Train开始就是一个<strong>经验领先于理论分析</strong>的偏经验的一门学问。本文是对论文《Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift》的导读。</p><p>　　机器学习领域有个很重要的假设：<strong>IID独立同分布假设</strong>，就是假设训练数据和测试数据是满足相同分布的，这是通过训练数据获得的模型能够在测试集获得好的效果的一个基本保障。那BatchNorm的作用是什么呢？<strong>BatchNorm就是在深度神经网络训练过程中使得每一层神经网络的输入保持相同分布的。</strong></p><p>　　接下来一步一步的理解什么是BN。</p><p>　　为什么深度神经网络<strong>随着网络深度加深，训练起来越困难，收敛越来越慢？</strong>这是个在DL领域很接近本质的好问题。很多论文都是解决这个问题的，比如ReLU激活函数，再比如Residual Network，BN本质上也是解释并从某个不同的角度来解决这个问题的。</p><h2 id="一、“Internal-Covariate-Shift”问题"><a href="#一、“Internal-Covariate-Shift”问题" class="headerlink" title="一、“Internal Covariate Shift”问题"></a>一、“Internal Covariate Shift”问题</h2><p>　　从论文名字可以看出，BN是用来解决“Internal Covariate Shift”问题的，那么首先得理解什么是“Internal Covariate Shift”？</p><p>　　论文首先说明Mini-Batch SGD相对于One Example SGD的两个优势：梯度更新方向更准确；并行计算速度快；（为什么要说这些？因为BatchNorm是基于Mini-Batch SGD的，所以先夸下Mini-Batch SGD，当然也是大实话）；然后吐槽下SGD训练的缺点：超参数调起来很麻烦。（作者隐含意思是用BN就能解决很多SGD的缺点）</p><p>　　接着引入<strong>covariate shift的概念</strong>：<strong>如果ML系统实例集合&lt;X,Y&gt;中的输入值X的分布老是变，这不符合IID假设</strong>，网络模型很难<strong>稳定的学规律</strong>，这不得引入迁移学习才能搞定吗，我们的ML系统还得去学习怎么迎合这种分布变化啊。对于深度学习这种包含很多隐层的网络结构，在训练过程中，因为各层参数不停在变化，所以每个隐层都会面临covariate shift的问题，也就是<strong>在训练过程中，隐层的输入分布老是变来变去，这就是所谓的“Internal Covariate Shift”，Internal指的是深层网络的隐层，是发生在网络内部的事情，而不是covariate shift问题只发生在输入层。</strong></p><p>　　然后提出了BatchNorm的基本思想：能不能<strong>让每个隐层节点的激活输入分布固定下来呢</strong>？这样就避免了“Internal Covariate Shift”问题了。</p><p>　　BN不是凭空拍脑袋拍出来的好点子，它是有启发来源的：之前的研究表明如果在图像处理中对输入图像进行白化（Whiten）操作的话——所谓<strong>白化</strong>，<strong>就是对输入数据分布变换到0均值，单位方差的正态分布</strong>——那么神经网络会较快收敛，那么BN作者就开始推论了：图像是深度神经网络的输入层，做白化能加快收敛，那么其实对于深度网络来说，其中某个隐层的神经元是下一层的输入，意思是其实深度神经网络的每一个隐层都是输入层，不过是相对下一层来说而已，那么能不能对每个隐层都做白化呢？这就是启发BN产生的原初想法，而BN也确实就是这么做的，<strong>可以理解为对深层神经网络每个隐层神经元的激活值做简化版本的白化操作。</strong></p><h2 id="二、BatchNorm的本质思想"><a href="#二、BatchNorm的本质思想" class="headerlink" title="二、BatchNorm的本质思想"></a><strong>二、</strong>BatchNorm的本质思想</h2><p>　　BN的基本思想其实相当直观：因为深层神经网络在做非线性变换前的<strong>激活输入值</strong>（就是那个x=WU+B，U是输入）<strong>随着网络深度加深或者在训练过程中，其分布逐渐发生偏移或者变动，之所以训练收敛慢，一般是整体分布逐渐往非线性函数的取值区间的上下限两端靠近</strong>（对于Sigmoid函数来说，意味着激活输入值WU+B是大的负值或正值），所以这<strong>导致反向传播时低层神经网络的梯度消失</strong>，这是训练深层神经网络收敛越来越慢的<strong>本质原因</strong>，<strong>而BN就是通过一定的规范化手段，把每层神经网络任意神经元这个输入值的分布强行拉回到均值为0方差为1的标准正态分布</strong>，其实就是把越来越偏的分布强制拉回比较标准的分布，这样使得激活输入值落在非线性函数对输入比较敏感的区域，这样输入的小变化就会导致损失函数较大的变化，意思是<strong>这样让梯度变大，避免梯度消失问题产生，而且梯度变大意味着学习收敛速度快，能大大加快训练速度。</strong></p><p>　　THAT’S IT。其实一句话就是：<strong>对于每个隐层神经元，把逐渐向非线性函数映射后向取值区间极限饱和区靠拢的输入分布强制拉回到均值为0方差为1的比较标准的正态分布，使得非线性变换函数的输入值落入对输入比较敏感的区域，以此避免梯度消失问题。</strong>因为梯度一直都能保持比较大的状态，所以很明显对神经网络的参数调整效率比较高，就是变动大，就是说向损失函数最优值迈动的步子大，也就是说收敛地快。BN说到底就是这么个机制，方法很简单，道理很深刻。</p><p>　　上面说得还是显得抽象，下面更形象地表达下这种调整到底代表什么含义。</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405225246905-37854887.png" alt="img"></p><p>  图1  几个正态分布</p><p>　　假设某个隐层神经元原先的激活输入x取值符合正态分布，正态分布均值是-2，方差是0.5，对应上图中最左端的浅蓝色曲线，通过BN后转换为均值为0，方差是1的正态分布（对应上图中的深蓝色图形），意味着什么，意味着输入x的取值正态分布整体右移2（均值的变化），图形曲线更平缓了（方差增大的变化）。这个图的意思是，BN其实就是把每个隐层神经元的激活输入分布从偏离均值为0方差为1的正态分布通过平移均值压缩或者扩大曲线尖锐程度，调整为均值为0方差为1的正态分布。</p><p>　　那么把激活输入x调整到这个正态分布有什么用？首先我们看下均值为0，方差为1的标准正态分布代表什么含义：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405225314624-527885612.png" alt="img"></p><p>图2  均值为0方差为1的标准正态分布图</p><p>　　这意味着在一个标准差范围内，也就是说64%的概率x其值落在[-1,1]的范围内，在两个标准差范围内，也就是说95%的概率x其值落在了[-2,2]的范围内。那么这又意味着什么？我们知道，激活值x=WU+B,U是真正的输入，x是某个神经元的激活值，假设非线性函数是sigmoid，那么看下sigmoid(x)其图形：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143109455-1460017374.png" alt="img"></p><p>图3. Sigmoid(x)</p><p>及sigmoid(x)的导数为：G’=f(x)*(1-f(x))，因为f(x)=sigmoid(x)在0到1之间，所以G’在0到0.25之间，其对应的图如下：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142351924-124461667.png" alt="img"></p><p>图4  Sigmoid(x)导数图</p><p>　　假设没有经过BN调整前x的原先正态分布均值是-6，方差是1，那么意味着95%的值落在了[-8,-4]之间，那么对应的Sigmoid（x）函数的值明显接近于0，这是典型的梯度饱和区，在这个区域里梯度变化很慢，为什么是梯度饱和区？请看下sigmoid(x)如果取值接近0或者接近于1的时候对应导数函数取值，接近于0，意味着梯度变化很小甚至消失。而假设经过BN后，均值是0，方差是1，那么意味着95%的x值落在了[-2,2]区间内，很明显这一段是sigmoid(x)函数接近于线性变换的区域，意味着x的小变化会导致非线性函数值较大的变化，也即是梯度变化较大，对应导数函数图中明显大于0的区域，就是梯度非饱和区。</p><p>　　从上面几个图应该看出来BN在干什么了吧？其实就是把隐层神经元激活输入x=WU+B从变化不拘一格的正态分布通过BN操作拉回到了均值为0，方差为1的正态分布，即原始正态分布中心左移或者右移到以0为均值，拉伸或者缩减形态形成以1为方差的图形。什么意思？就是说<strong>经过BN后，目前大部分Activation的值落入非线性函数的线性区内，其对应的导数远离导数饱和区，这样来加速训练收敛过程。</strong></p><p>　　但是很明显，看到这里，稍微了解神经网络的读者一般会提出一个疑问：如果都通过BN，那么不就跟把非线性函数替换成线性函数效果相同了？这意味着什么？我们知道，如果是多层的线性函数变换其实这个深层是没有意义的，因为多层线性网络跟一层线性网络是等价的。这意味着网络的<strong>表达能力</strong>下降了，这也意味着深度的意义就没有了。<strong>所以BN为了保证非线性的获得，对变换后的满足均值为0方差为1的x又进行了scale加上shift操作(y=scale*x+shift)</strong>，每个神经元增加了两个参数scale和shift参数，这两个参数是通过训练学习到的，意思是通过scale和shift把这个值从标准正态分布左移或者右移一点并长胖一点或者变瘦一点，每个实例挪动的程度不一样，这样等价于非线性函数的值从正中心周围的线性区往非线性区动了动。核心思想应该是想找到一个线性和非线性的较好平衡点，既能享受非线性的较强表达能力的好处，又避免太靠非线性区两头使得网络收敛速度太慢。当然，这是我的理解，论文作者并未明确这样说。但是很明显这里的scale和shift操作是会有争议的，因为按照论文作者论文里写的理想状态，就会又通过scale和shift操作把变换后的x调整回未变换的状态，那不是饶了一圈又绕回去原始的“Internal Covariate Shift”问题里去了吗，感觉论文作者并未能够清楚地解释scale和shift操作的理论原因。</p><h2 id="三、训练阶段如何做BatchNorm"><a href="#三、训练阶段如何做BatchNorm" class="headerlink" title="三、训练阶段如何做BatchNorm"></a>三、训练阶段如何做BatchNorm</h2><p>　　上面是对BN的抽象分析和解释，具体在Mini-Batch SGD下做BN怎么做？其实论文里面这块写得很清楚也容易理解。为了保证这篇文章完整性，这里简单说明下。</p><p>　　假设对于一个深层神经网络来说，其中两层结构如下：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405213859690-1933561230.png" alt="img"></p><p>  图5  DNN其中两层</p><p>　　要对每个隐层神经元的激活值做BN，可以想象成每个隐层又加上了一层BN操作层，它位于X=WU+B激活值获得之后，非线性函数变换之前，其图示如下：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405213955224-1791925244.png" alt="img"></p><p>  图6. BN操作</p><p>　　对于Mini-Batch SGD来说，一次训练过程里面包含m个训练实例，其具体BN操作就是对于隐层内每个神经元的激活值来说，进行如下变换：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142802238-1209499294.png" alt="img"></p><p>　　要注意，这里t层某个神经元的x(k)不是指原始输入，就是说不是t-1层每个神经元的输出，而是t层这个神经元的线性激活x=WU+B，这里的U才是t-1层神经元的输出。变换的意思是：某个神经元对应的原始的激活x通过减去mini-Batch内m个实例获得的m个激活x求得的均值E(x)并除以求得的方差Var(x)来进行转换。</p><p>　　上文说过经过这个<strong>变换后某个神经元的激活x形成了均值为0，方差为1的正态分布，目的是把值往后续要进行的非线性变换的线性区拉动，增大导数值，增强反向传播信息流动性，加快训练收敛速度。**</strong>但是这样会导致网络表达能力下降，为了防止这一点，每个神经元增加两个调节参数（scale和shift），这两个参数是通过训练来学习到的，用来对变换后的激活反变换，使得网络表达能力增强，即对变换后的激活进行如下的scale和shift操作，这其实是变换的反操作：**</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142923190-79595046.png" alt="img"></p><p>　　BN其具体操作流程，如论文中描述的一样：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142956288-903484055.png" alt="img"></p><p>　　过程非常清楚，就是上述公式的流程化描述，这里不解释了，直接应该能看懂。</p><h2 id="四、BatchNorm的推理-Inference-过程"><a href="#四、BatchNorm的推理-Inference-过程" class="headerlink" title="四、BatchNorm的推理(Inference)过程"></a>四、BatchNorm的推理(Inference)过程</h2><p>　　BN在训练的时候可以根据Mini-Batch里的若干训练实例进行激活数值调整，但是在推理（inference）的过程中，很明显输入就只有一个实例，看不到Mini-Batch其它实例，那么这时候怎么对输入做BN呢？因为很明显一个实例是没法算实例集合求出的均值和方差的。这可如何是好？</p><p>　　既然没有从Mini-Batch数据里可以得到的统计量，那就想其它办法来获得这个统计量，就是均值和方差。可以用从所有训练实例中获得的统计量来代替Mini-Batch里面m个训练实例获得的均值和方差统计量，因为本来就打算用全局的统计量，只是因为计算量等太大所以才会用Mini-Batch这种简化方式的，那么在推理的时候直接用全局统计量即可。</p><p>　　决定了获得统计量的数据范围，那么接下来的问题是如何获得均值和方差的问题。很简单，因为每次做Mini-Batch训练时，都会有那个Mini-Batch里m个训练实例获得的均值和方差，现在要全局统计量，只要把每个Mini-Batch的均值和方差统计量记住，然后对这些均值和方差求其对应的数学期望即可得出全局统计量，即：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143405654-1995556833.png" alt="img"></p><p>　　有了均值和方差，每个隐层神经元也已经有对应训练好的Scaling参数和Shift参数，就可以在推导的时候对每个神经元的激活数据计算NB进行变换了，在推理过程中进行BN采取如下方式：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143658338-63450857.png" alt="img"></p><p>　　这个公式其实和训练时</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143807788-1841864822.png" alt="img"></p><p>　　是等价的，通过简单的合并计算推导就可以得出这个结论。那么为啥要写成这个变换形式呢？我猜作者这么写的意思是：在实际运行的时候，按照这种变体形式可以减少计算量，为啥呢？因为对于每个隐层节点来说：</p><p>　　　　　　　　<img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407144519480-1024698421.png" alt="img">　　<img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407144549010-487189588.png" alt="img"></p><p>　　都是固定值，这样这两个值可以事先算好存起来，在推理的时候直接用就行了，这样比原始的公式每一步骤都现算少了除法的运算过程，乍一看也没少多少计算量，但是如果隐层节点个数多的话节省的计算量就比较多了。</p><h2 id="五、BatchNorm的好处"><a href="#五、BatchNorm的好处" class="headerlink" title="五、BatchNorm的好处"></a>五、BatchNorm的好处</h2><p>　　BatchNorm为什么NB呢，关键还是效果好。<strong>①**</strong>不仅仅极大提升了训练速度，收敛过程大大加快；②还能增加分类效果，一种解释是这是类似于Dropout的一种防止过拟合的正则化表达方式，所以不用Dropout也能达到相当的效果；③另外调参过程也简单多了，对于初始化要求没那么高，而且可以使用大的学习率等。**总而言之，经过这么简单的变换，带来的好处多得很，这也是为何现在BN这么快流行起来的原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;转载 from：&lt;a href=&quot;https://www.cnblogs.com/guoyaohua/p/8724433.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/guoyaohua
      
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>linux 文件名中有空格、括号 时如何操作</title>
    <link href="http://yoursite.com/2019/08/14/linux-%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%AD%E6%9C%89%E7%A9%BA%E6%A0%BC%E3%80%81%E6%8B%AC%E5%8F%B7-%E6%97%B6%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/08/14/linux-文件名中有空格、括号-时如何操作/</id>
    <published>2019-08-14T08:22:53.000Z</published>
    <updated>2019-08-14T08:25:27.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何处理-cd-cp"><a href="#如何处理-cd-cp" class="headerlink" title="如何处理 cd cp"></a>如何处理 <code>cd</code> <code>cp</code></h3><ul><li><p>将文件名用<strong>双引号</strong> 包起来</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd = 'cp -r <span class="string">"&#123;&#125;"</span> <span class="string">"&#123;&#125;"</span>'.format(source_path, target_path)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何处理-cd-cp&quot;&gt;&lt;a href=&quot;#如何处理-cd-cp&quot; class=&quot;headerlink&quot; title=&quot;如何处理 cd cp&quot;&gt;&lt;/a&gt;如何处理 &lt;code&gt;cd&lt;/code&gt; &lt;code&gt;cp&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将文件
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python 3.3.3 字面量,正则,反斜杠和原始字符串</title>
    <link href="http://yoursite.com/2019/08/14/python-3-3-3-%E5%AD%97%E9%9D%A2%E9%87%8F-%E6%AD%A3%E5%88%99-%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%92%8C%E5%8E%9F%E5%A7%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2019/08/14/python-3-3-3-字面量-正则-反斜杠和原始字符串/</id>
    <published>2019-08-14T06:59:02.000Z</published>
    <updated>2019-08-14T07:00:06.680Z</updated>
    
    <content type="html"><![CDATA[<ul><li>注明：转载 from <a href="https://www.cnblogs.com/xiangnan/p/3446904.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiangnan/p/3446904.html</a></li></ul><h1 id="两个不起眼但是比较重要的设定"><a href="#两个不起眼但是比较重要的设定" class="headerlink" title="两个不起眼但是比较重要的设定"></a>两个不起眼但是比较重要的设定</h1><ul><li>Python str类型的字面量解释器</li></ul><p>当反斜杠及其紧接字符无法构成一个具有特殊含义的序列(‘recognized escape sequences’)时,Python选择保留全部字符.直接看例子:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\c'</span></span><br><span class="line"><span class="string">'\\c'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\d'</span></span><br><span class="line"><span class="string">'\\d'</span></span><br></pre></td></tr></table></figure><p>官方管’\c’这种序列叫’unrecognized escape sequences’.官方文档相应部分:</p><p>Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., <em>the backslash is left in the string</em>. (This behavior is useful when debugging: if an escape sequence is mistyped, the resulting output is more easily recognized as broken.) </p><p>按这段英文的意思,估计C语言里面,’c’和’\c’是等同的.Python是’\c’和’\c’等同.这个等以后学C语言再确定.</p><p>与上面对应的是,如果紧接字符能够和反斜杠构成’recognized escape sequences’的<strong>全部</strong>或者<strong>起始部分</strong>,中文就叫’被承认的转义序列’吧.比如:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\b'</span></span><br><span class="line"><span class="string">'\x08'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\n'</span></span><br><span class="line"><span class="string">'\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\x'</span></span><br><span class="line"><span class="symbol">SyntaxError:</span> (unicode error) <span class="string">'unicodeescape'</span> codec can<span class="string">'t decode bytes in position 0-1: truncated \xXX escape</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; '</span>\N<span class="string">'</span></span><br><span class="line"><span class="string">SyntaxError: (unicode error) '</span>unicodeescape<span class="string">' codec can'</span>t decode bytes <span class="keyword">in</span> position <span class="number">0</span>-<span class="number">1</span>: malformed \N character escape</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\U'</span></span><br><span class="line"><span class="symbol">SyntaxError:</span> (unicode error) <span class="string">'unicodeescape'</span> codec can<span class="string">'t decode bytes in position 0-1: truncated \UXXXXXXXX escape</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; '</span>\u<span class="string">'</span></span><br><span class="line"><span class="string">SyntaxError: (unicode error) '</span>unicodeescape<span class="string">' codec can'</span>t decode bytes <span class="keyword">in</span> position <span class="number">0</span>-<span class="number">1</span>: truncated \uXXXX escape</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><ul><li>Python re模块正则表达式解释器</li></ul><p>当反斜杠及其紧接字符无法构成一个具有特殊含义的序列(special sequences)时,re选择忽略反斜杠,例如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\e'</span>,<span class="string">'eee'</span>)</span><br><span class="line">[<span class="string">'e'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'e'</span>,<span class="string">'eee'</span>)</span><br><span class="line">[<span class="string">'e'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>]</span><br></pre></td></tr></table></figure><p>可见,’\e’和’e’起到了完全一样的效果.Python相关文档描述是:</p><p>If the ordinary character is not on the list, then the resulting RE will match the second character. For example, <code>\$</code> matches the character <code>&#39;$&#39;</code>.</p><p>与上面对应的是,如果能够构成special sequences,那么re会解释为相应含义.例如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\w'</span>,<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br></pre></td></tr></table></figure><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><p>字面量(Literals),是用于表示一些Python内建类型的常量的符号.最常见的字面量类型是str literals 和 bytes literals.</p><p>比如:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span></span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"abc"</span></span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'啊哦额'</span></span><br><span class="line"><span class="string">'啊哦额'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'abc'</span></span><br><span class="line"><span class="string">b'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">r'\n'</span></span><br><span class="line"><span class="string">'\\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'啊哦额'</span></span><br><span class="line">SyntaxError: bytes can only contain ASCII literal characters.</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>反斜杠\的用途按紧接其后的字符种类可划分为3类:</p><p>1.将特殊字符转换为字面量.这特殊字符包括(单引号,双引号,反斜杠):’”\</p><p>2.将普通字符转换为特殊序列.包括:abfNnrtuUvx0123456789.</p><p>(注意,bytes字面量中,NuU这三个普通字符无法被转义成特殊序列)</p><p>3.将”新行”和自身忽略掉.这个比较抽象,举例说明:py文件中,某个字符串太长了,以至于需要分两行写,那么你可以插个反斜杠,紧接着换行,然后写剩余字符串.</p><p>下面是官方文档归纳的表:</p><table><thead><tr><th>Escape Sequence</th><th>Meaning</th><th>Notes</th></tr></thead><tbody><tr><td><code>\newline</code></td><td>Backslash and newline ignored</td><td></td></tr><tr><td><code>\\</code></td><td>Backslash (<code>\</code>)</td><td></td></tr><tr><td><code>\&#39;</code></td><td>Single quote (<code>&#39;</code>)</td><td></td></tr><tr><td><code>\&quot;</code></td><td>Double quote (<code>&quot;</code>)</td><td></td></tr><tr><td><code>\a</code></td><td>ASCII Bell (BEL)</td><td></td></tr><tr><td><code>\b</code></td><td>ASCII Backspace (BS)</td><td></td></tr><tr><td><code>\f</code></td><td>ASCII Formfeed (FF)</td><td></td></tr><tr><td><code>\n</code></td><td>ASCII Linefeed (LF)</td><td></td></tr><tr><td><code>\r</code></td><td>ASCII Carriage Return (CR)</td><td></td></tr><tr><td><code>\t</code></td><td>ASCII Horizontal Tab (TAB)</td><td></td></tr><tr><td><code>\v</code></td><td>ASCII Vertical Tab (VT)</td><td></td></tr><tr><td><code>\ooo</code></td><td>Character with octal value <em>ooo</em></td><td>(1,3)</td></tr><tr><td><code>\xhh</code></td><td>Character with hex value <em>hh</em></td><td>(2,3)</td></tr></tbody></table><p>Escape sequences only recognized in string literals are:</p><table><thead><tr><th>Escape Sequence</th><th>Meaning</th><th>Notes</th></tr></thead><tbody><tr><td><code>\N{name}</code></td><td>Character named <em>name</em> in the Unicode database</td><td>(4)</td></tr><tr><td><code>\uxxxx</code></td><td>Character with 16-bit hex value <em>xxxx</em></td><td>(5)</td></tr><tr><td><code>\Uxxxxxxxx</code></td><td>Character with 32-bit hex value <em>xxxxxxxx</em></td><td>(6)</td></tr></tbody></table><p>举例:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\N&#123;END OF LINE&#125;'</span></span><br><span class="line"><span class="string">'\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\N&#123;HORIZONTAL TABULATION&#125;'</span></span><br><span class="line"><span class="string">'\t'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\u9f6a'</span>==<span class="string">'齪'</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\1'</span>==<span class="string">'\01'</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\1'</span>==<span class="string">'\001'</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\1'</span>==<span class="string">'\0000001'</span></span><br><span class="line">False</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><ul><li>正则表达式的反斜杠的作用</li></ul><p>一种是使紧跟在后面的元字符(special characters或metacharacters)失去特殊含义,变为字面量.这些元字符有14个:</p><p>.^$*+?{}<a href></a>|</p><p>另一种是使紧跟在后面的普通字符变得具有特殊含义.这些普通字符是:</p><p>AbBdDsSwWZ0123456789</p><p>以及在str字面量中能被反斜杠转义的字符:</p><p>&#39;“abfnrtuUvx0123456789</p><p>例如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\"'</span>,<span class="string">'"'</span>)</span><br><span class="line">[<span class="string">'"'</span>]</span><br></pre></td></tr></table></figure><p>正则pattern的反斜杠的作用和Python字面量的反斜杠类似,这据说是带来”反斜杠灾难”的根源.最典型的莫过于你需要用正则’\\‘才能匹配字面量反斜杠’\‘.</p><p>为方便说明,我们假设re.search(pattern,string)中,pattern表示正则表达式字符串,string表示待匹配的字符串.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; re.search(<span class="string">'\\\\'</span>,<span class="string">'\\'</span>)</span><br><span class="line">&lt;_sre<span class="selector-class">.SRE_Match</span> <span class="selector-tag">object</span> at <span class="number">0</span>x02858528&gt;</span><br></pre></td></tr></table></figure><p>详细来说就是一个文本层级的反斜杠’&#39;(比如你在txt文件中看到的反斜杠),对应Python str 字面量的’\‘,对应正则pattern的’\\‘.这个确实比较难以理解,实在不行就住这点就好:<strong>如果不是最简单的正则类型(比如’ab’),强烈推荐对pattern使用r前缀符</strong>.这样容易理解:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.search(<span class="string">r'\\'</span>,<span class="string">'\\'</span>)</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x02858448</span>&gt;</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>1.多重含义的特殊序列处理机制</li></ul><p>b0123456789比较特殊,它们在Python字面量和re正则中都能和反斜杠构成作用不同的特殊序列.例如\b,在python 字面量中解释为”退格键”.re正则中解释为’单词边界’.<strong>python 字面量有优先解释权</strong>,如下可证:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\b'</span>,<span class="string">'\b'</span>)  <span class="comment">#'\b'被优先解释为退格键,而不是单词边界</span></span><br><span class="line">[<span class="string">'\x08'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b'</span>,<span class="string">'\b'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b'</span>,<span class="string">'b'</span>) </span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>]</span><br></pre></td></tr></table></figure><p>再比如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'(a)\1\1'</span>,<span class="string">'aaa'</span>) <span class="comment">#\1按字面量优先解释为八进制字符串,因此无匹配结果</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'(a)\\1\\1'</span>,<span class="string">'aaa'</span>)  <span class="comment">#\\1按正则引擎层级的反斜杠解释为第一个匹配组提取到的字符,相当于'(a)aa'</span></span><br><span class="line">[<span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'a\1\1'</span>,<span class="string">'a\1\1'</span>) <span class="comment">#\1按字面量优先解释为八进制字符串,所以有匹配结果</span></span><br><span class="line">[<span class="string">'a\x01\x01'</span>]</span><br></pre></td></tr></table></figure><p>了解这个设置有什么用?</p><p>1.当你想使用正则层级的特殊序列\1时,如果你没有使用r作为前缀,那么你必须使用\1才能如愿.</p><p>2.当你想使用字面量层级的特殊序列\1时,则不能使用r作为pattern前缀.</p><p>想想,你有可能在一个r前缀的字符串中写出能够匹配值为1的八进制字符串的pattern吗?</p><p>也许我太较真了,因为实践中好像从没遇到过需要匹配值为1的八进制字符串的情况,但理论上就是这样的.</p><ul><li><strong>2.正则表达式中特殊序列的准确定义的猜想</strong></li></ul><p>官方文档下面的一句话值得推敲:</p><p>Note that <code>\b</code> is used to represent word boundaries, and means “backspace” only inside character classes</p><p>意思是说\b只有在[…]里面时才表示退格键,这显然是错的.比如下面这个例子,\b没有在[]之内,但它是按”退格键”解释的,并非”单词边界”:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\b'</span>,<span class="string">'\b'</span>)</span><br><span class="line">[<span class="string">'\x08'</span>]</span><br></pre></td></tr></table></figure><p>除非官方文档描述的\b是指文本层面的数据(比如你在txt文档里看到的\b).</p><p>由此引出了一个猜想,re的正则pattern中”反斜杠+普通字符”构成特殊序列或”反斜杠+特殊字符”构成字面量–这种描述中的反斜杠准确来说是指两个反斜杠!</p><p>仍然是举例说明:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b\w+\\b'</span>,<span class="string">'one two three'</span>)  <span class="comment">#必须用\\b才能表示单词边界</span></span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b\\w+\\b'</span>,<span class="string">'one two three'</span>)  <span class="comment">#想想,为什么\w和\\w都一样</span></span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\d'</span>,<span class="string">'123'</span>)</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\d'</span>,<span class="string">'123'</span>)</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><ul><li>3.u和U只在str字面量中才能被转义,bytes字面量中是普通字符.</li></ul><p>以下是我猜测的正则表达式分析器和Python字面量分析器的传递规则表格:</p><table><thead><tr><th>Python string literal</th><th>values passed to regular expression</th><th>number of characters</th><th>what regular expression engine does</th><th>real meaning for regular expression</th></tr></thead><tbody><tr><td>\e</td><td>\e</td><td>2</td><td>ignore the backslash</td><td>e</td></tr><tr><td>\e</td><td>\e</td><td>2</td><td>ignore the backslash</td><td>e</td></tr><tr><td>e</td><td>e</td><td>1</td><td>nothing spacial</td><td>e</td></tr><tr><td>\n</td><td>\n</td><td>1</td><td>nothing spacial</td><td>换行符</td></tr><tr><td>\n</td><td>\n</td><td>2</td><td>\n is special</td><td>换行符</td></tr><tr><td>\b</td><td>\b</td><td>1</td><td>nothing spacial</td><td>退格键</td></tr><tr><td>\b</td><td>\b</td><td>2</td><td>\b is special</td><td>word boundary</td></tr><tr><td>\s</td><td>\s</td><td>2</td><td>\s is special</td><td>Unicode whitespace characters</td></tr><tr><td>\</td><td>\</td><td>1</td><td>must followed by a charcter</td><td>Can’t form any meaning</td></tr><tr><td>\\</td><td>\</td><td>2</td><td>remove all special meanning of \</td><td>\</td></tr><tr><td>*</td><td>*</td><td>1</td><td>* is special</td><td>repeat the left characters 0 or more times</td></tr><tr><td>*</td><td>*</td><td>2</td><td>remove all special meanning of *</td><td>*</td></tr></tbody></table><p>最后是待探究的例子:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[<span class="string">'\x08'</span>, <span class="string">'\x08'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[<span class="string">'\x08'</span>, <span class="string">'\x08'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'c'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'c'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'\\c'</span>, <span class="string">'\\c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'\\c'</span>, <span class="string">'\\c'</span>]</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>参考:</p><p>Python 3.3.3 官方文档</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;注明：转载 from &lt;a href=&quot;https://www.cnblogs.com/xiangnan/p/3446904.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/xiangna
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>glob 之 **</title>
    <link href="http://yoursite.com/2019/08/13/glob-%E4%B9%8B/"/>
    <id>http://yoursite.com/2019/08/13/glob-之/</id>
    <published>2019-08-13T06:25:21.000Z</published>
    <updated>2019-08-14T02:07:02.733Z</updated>
    
    <content type="html"><![CDATA[<ul><li>该篇主要介绍glob的一些使用小技巧</li></ul><h3 id="想要获得某个文件目录下所有-指定文件格式-的所有文件"><a href="#想要获得某个文件目录下所有-指定文件格式-的所有文件" class="headerlink" title="想要获得某个文件目录下所有 指定文件格式 的所有文件"></a>想要获得某个文件目录下所有 <strong><em>指定文件格式</em></strong> 的所有文件</h3><ul><li><p>假设有一个文件环境如下图所示</p><p><img src="https://i.loli.net/2019/08/14/sjTANPfDuV6cord.png" alt="搜狗截图20190814100532.png"></p></li></ul><ul><li><p>比如想要获得<code>/userhome/dataset/MSVD/YouTubeClips/YouTubeClips</code> 下 <code>.avi</code>格式的所有文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span> = <span class="string">'/userhome/dataset/MSVD/YouTubeClips/YouTubeClips/'</span></span><br><span class="line">glob.glob(<span class="built_in">path</span> + <span class="string">'*.avi'</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>想要获得某目录下的所有子目录中的所有指定文件格式的所有文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span> = <span class="string">'/userhome/dataset/MSVD/YouTubeClips/'</span></span><br><span class="line">glob.glob(<span class="built_in">path</span> + <span class="string">'**/'</span> + <span class="string">'*.avi'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">path</span> = <span class="string">'/userhome/dataset/MSVD/'</span></span><br><span class="line">glob.glob(<span class="built_in">path</span> + <span class="string">'**/'</span> + <span class="string">'**/'</span> + <span class="string">'*.avi'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;该篇主要介绍glob的一些使用小技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;想要获得某个文件目录下所有-指定文件格式-的所有文件&quot;&gt;&lt;a href=&quot;#想要获得某个文件目录下所有-指定文件格式-的所有文件&quot; class=&quot;headerlink&quot; title=&quot;想
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
