<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShiYaya</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-03T07:13:39.369Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ShiYaya</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weakly-Supervised Spatio-Temporally Grounding Natural Sentence in Video</title>
    <link href="http://yoursite.com/2019/12/02/Weakly-Supervised-Spatio-Temporally-Grounding-Natural-Sentence-in-Video/"/>
    <id>http://yoursite.com/2019/12/02/Weakly-Supervised-Spatio-Temporally-Grounding-Natural-Sentence-in-Video/</id>
    <published>2019-12-02T03:36:02.000Z</published>
    <updated>2019-12-03T07:13:39.369Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>ACL 2019</strong></li></ul><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><ul><li><p>image grounding取得了很大的进步，但是将该任务迁移到视频上，需要对视频中的每帧都标注region，这个工程量是巨大的。</p></li><li><p>为了避免这种标注工作的工程量，一些<strong>weakly-supervised</strong> video grouding工作【1】【2】被提出来，他们只提供了video-sentence pairs，没有提供 fine-grained regional annotations。在他们的 video grounding任务中，他们仅仅对名词和代词在 视频的静态帧进行grounding。</p></li><li><p>但是这种 grounding存在问题，比如sentence: A brown and white dog is lying on the grass and then it stands up. 但是帧中出现了多个狗，而我们给出的要搜索的对象仅仅是一个名词： ‘dog’，没有其他更多的信息，来进行更加具体地定位，那么就有可能定位错误。另外只对一张静态帧进行定位，也无法捕捉到object在时域上的动态变化。</p></li><li><p>基于上述的分析，本文提出了一个在video grounding上 weakly-supervised 的新任务：<strong>weakly-supervised spatio-temporally grounding sentence in video (WSSTG).</strong>    </p></li></ul><h3 id="Weakly-supervised-spatio-temporally-grounding-sentence-in-video"><a href="#Weakly-supervised-spatio-temporally-grounding-sentence-in-video" class="headerlink" title="Weakly-supervised spatio-temporally grounding sentence in video"></a>Weakly-supervised spatio-temporally grounding sentence in video</h3><ul><li>Specifically, given a natural sentence and a video, we aim to localize a spatio-temporal tube (i.e., a sequence of bounding boxes) ,（本文中作者将tube 称作 instance）</li><li>yaya: 相比于之前的video-grounding任务，同是 weakly-supervised，但是有两点不同：（1）是句子级别的描述，对要定位的对象的描述更加具体，而不是仅仅是个noun。（2）是要定位出一个 spatial-temporal tube，而不是仅在一张静态帧中定位出一个bbox。</li><li>这两点不同同时带来了优势和挑战</li><li>（1）细节性的描述可以消除歧义，但是如何捕捉句子中的语义并在video中定位出来是一个难题；（2）相比于在静态帧中定位一个bbox, 而是在video中定位一个tube,更能呈现出一个object在时域上的动态。但是，如何利用和建模tube的时空特性以及它们与句子的复杂关系提出了另一个挑战。</li><li>compared with 【2】: different from 【2】，whose text input consists of nouns/pronouns and output is a bounding box in a specific frame, we aim  to ground a natural sentence and output a spatio-temporal tube in the video. </li></ul><h3 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h3><ul><li>提出了一个新任务：weakly-supervised spatio-temporally grounding sentence in video</li><li>针对该任务提出了一个method：提出了一个Attentive interactor利用 tube(instance) 与 sentence之间的细粒度的关系来计算 匹配度；提出了一个diversity loss来加强 reliable instance-sentence pairs 并惩罚 unreliable ones。</li><li>在VID object detection dataset 数据集的基础上，对tube(instance) 增加了description</li></ul><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><ul><li>该任务是 给出一个 a natural sentence query <strong>q</strong> and a video <strong>v</strong> 来定位一个spatial-temporal tube，作者也将这个tube 称作 instance。</li><li>由于是弱监督，因此仅仅只给出 video-sentence pair，细粒度的regional annotations不给出！</li><li>将该任务转为一个 Multiple instance learning problem。给定一个video，首先由instance generator【3】来生成一组instance proposals，然后再根据语义相似性来匹配 natural sentence query 和 instance。  </li></ul><h4 id="Instance-Extraction"><a href="#Instance-Extraction" class="headerlink" title="Instance Extraction"></a>Instance Extraction</h4><ul><li><strong>Instance Generation</strong> ：  先由faster rcnn提取object proposals，假设每帧提取N个proposal ， 然后根据【3】得到N个spatial-temporal tube</li><li><strong>Feature Representation</strong> ：I3D-RGB， I3D-Flow， frame-level RoI pooled feature   </li></ul><h4 id="Attentive-Interactor"><a href="#Attentive-Interactor" class="headerlink" title="Attentive Interactor"></a>Attentive Interactor</h4><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g9io2sodynj30i40hk0v9.jpg" alt="搜狗截图20191202204720.png"></p><ul><li>（1）分别对 sequential visual features 和 sequential textual features 经过LSTM进行编码，LSTM每个step输出的隐层状态作为新的representation，得到新的visual feature 和 sentence representation</li><li>（2）依次以visual feature中的每个隐状态作为查询，以 sentence 所有隐状态作为key 和 value，输入Attention中，则得到了<strong>visual guided sentence feature</strong>。（直观的理解：在给定某一个视觉特征，用attention去分析要关注哪一个word）  </li></ul><h4 id="Matching-Behavior-Characterization"><a href="#Matching-Behavior-Characterization" class="headerlink" title="Matching Behavior Characterization"></a>Matching Behavior Characterization</h4><ul><li>用余弦函数计算 <code>i-th</code> visual feature 和 visual guided sentence features 之间的 匹配度</li><li>对所有的step 加和，则得到instance proposal 与 sentence 之间的匹配度</li></ul><h3 id="Training-Loss"><a href="#Training-Loss" class="headerlink" title="Training Loss"></a>Training Loss</h3><ul><li><p>论文对这里介绍的比较详细，参见论文。</p></li><li><p><strong>ranking loss</strong>： aiming at distinguishing aligned video-sentence pairs from the unaligned ones.  这个损失是希望不匹配的video-sentence之间计算出来的匹配度差一些，比如给网络输入不与该视频对应的句子。</p></li><li><p><strong>novel diversity loss</strong> ：to strengthen the matching behaviors between reliable instance-sentence pairs and penalize the unreliable ones from the aligned video-sentence pair.  这个损失主要是希望对一个video，在计算tube 与 sentence之间的匹配度时，希望不同的 tube之间的差异性（diversity）大一些！</p></li></ul><h3 id="Inference"><a href="#Inference" class="headerlink" title="Inference"></a>Inference</h3><ul><li>一个video 给出了N个 tube proposal，当计算完匹配度之后，选取匹配度最大的那个proposal，然后计算与GT之间的 overlap【4】，若overlap 大于一个阈值，则任务预测正确。</li></ul><h3 id="Yaya-Analysis："><a href="#Yaya-Analysis：" class="headerlink" title="Yaya Analysis："></a>Yaya Analysis：</h3><ul><li><p><strong>此类任务可提升的point</strong></p></li><li><p>更好的 detector来获取 object proposal</p></li><li><p>更好的算法来获取 tube proposal</p></li><li><p>设计算法更好滴计算 sentence 与 tube proposal 匹配度！</p></li><li><p>对 rank loss 给予更多的约束，像此文：提出了一个novel  diversity loss</p></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>【1】De-An Huang, Shyamal Buch, Lucio Dery, Animesh Garg, Li Fei-Fei, and Juan Carlos Niebles. 2018. <strong>Finding “it”: Weakly-supervised reference-aware visual grounding in instructional videos</strong>. In CVPR. </li><li>【2】Luowei Zhou, Nathan Louis, and Jason J Corso. 2018. <strong>Weakly-supervised video object grounding from text by loss weighting and object interaction</strong>. BMVC. </li><li>【3】Georgia Gkioxari and Jitendra Malik. 2015. <strong>Finding action tubes</strong>. In CVPR, pages 759–768. </li><li>【4】Masataka Yamaguchi, Kuniaki Saito, Yoshitaka Ushiku, and Tatsuya Harada. 2017. <strong>Spatio-temporal person retrieval via natural language queries</strong>. In ICCV. </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ACL 2019&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation
      
    
    </summary>
    
      <category term="Visual Grounding" scheme="http://yoursite.com/categories/Visual-Grounding/"/>
    
    
      <category term="Viusal Grounding" scheme="http://yoursite.com/tags/Viusal-Grounding/"/>
    
  </entry>
  
  <entry>
    <title>Finding It: Weakly-Supervised Reference-Aware Visual Grounding in Instructional Videos</title>
    <link href="http://yoursite.com/2019/12/02/Finding-It-Weakly-Supervised-Reference-Aware-Visual-Grounding-in-Instructional-Videos/"/>
    <id>http://yoursite.com/2019/12/02/Finding-It-Weakly-Supervised-Reference-Aware-Visual-Grounding-in-Instructional-Videos/</id>
    <published>2019-12-02T03:23:38.000Z</published>
    <updated>2019-12-02T03:37:20.039Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Learning to Generate Grounded Visual Captions without Localization Supervision</title>
    <link href="http://yoursite.com/2019/12/01/Learning-to-Generate-Grounded-Visual-Captions-without-Localization-Supervision/"/>
    <id>http://yoursite.com/2019/12/01/Learning-to-Generate-Grounded-Visual-Captions-without-Localization-Supervision/</id>
    <published>2019-12-01T04:15:21.000Z</published>
    <updated>2019-12-01T10:47:20.570Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ICLR-2020-under-view"><a href="#ICLR-2020-under-view" class="headerlink" title="ICLR 2020 under view"></a>ICLR 2020 under view</h3><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><ul><li><p>问题：在captioning 任务中，当前的评价指标并不能很好的反应生成的句子与该视频之间的契合度（Groud），有可能生成的句子只是基于在训练过程中学习到的priors（一种统计特性，而不是基于该视频本身）</p></li><li><p>当前模型对于 groud 这个任务，存在的困难：（1）由于当前的 language model 常使用 attention 机制来关注某一个 region，以此来预测下一个生成的单词。换句话说，就是在不知道将会生成什么单词的情况下，却要先定位region， 另外，一篇论文 [1] 提出，attention机制关注的region与人类所关注的并不一致（2）更难的是：传入 attention网络的是 RNN 的 hidden_state，由于 RNN 的记录历史的特性，这个输入包括的是过去所有的信息，而不是针对于某一个individual word。  </p></li></ul><h3 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h3><ul><li>不同于 GVD，该文不使用 annotation bbox 作为监督信号，而是使用了 decoder + localizer + redecoder的结构来自我监督（self-supervision）</li><li>由于其自监督的特性，在一些infrequent word上该文的方法比监督的方法，效果更好</li><li>不仅使用一般的为每个 object class 计算 grounding accuracy， 还提出了一个新的指标：为每个sentence 计算grounding accuracy。</li></ul><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><ul><li><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g9heo6n8glj318k0lp0ze.jpg" alt="搜狗截图20191201183637.png"></p></li><li><p><strong>分阶段训练</strong></p></li><li><p>（1）正常的 encoder-decoder先训练 ~30个epoch</p></li><li><p>（2）在正常的基础上进行添加。 （a）<strong>re-localize</strong>: language_lstm 会得到y1, y2, …, yT 个预测的序列，将这些序列作为attention机制中的 查询向量，赋给每个region一个attention系数，这样就可以在每一个step重构attention系数分配，这样也解决了motivation中提到的问题，即attention是由某一个individual word 而计算得来的。（b）每个step 有了attention对齐之后的attention_region， 再输入到language_LSTM中，得到<strong>再次预测的sequence of word</strong>。</p></li><li><p>在这第二阶段，就是两个loss 交叉熵损失进行权重加和来训练</p></li><li><p>可以发现一个问题，对于visual-words 和 non-visual-words都进行了re-localize。实际上对于，on a 等这类词汇，并不需要在image中找到 grounded region。 该文作者在补充材料里给出了一些额外的实验， eg, 将这些non-visual words 进行抑制，不计算reconstruction loss, 或者给这些localized region representation重新赋给invalid representaion。但是实验表明，在Flickr30 上性能（caption and ground）有提升，但是在 activity上（caption 没变化，ground下降）。</p></li><li><p>但是作者并没有给出分析，我个人总觉得实验设计的不完善，分析的也不多。</p></li></ul><h3 id="Measuring-grounding-per-generated-sentence"><a href="#Measuring-grounding-per-generated-sentence" class="headerlink" title="Measuring grounding per generated sentence"></a>Measuring grounding per generated sentence</h3><ul><li>提该指标的原因：（Such metrics （F1all, F1loc） are extremely stringent as captioning models are generally biased toward certain words in the vocabulary, given the long-tailed distribution of words. ）</li></ul><h3 id="Analysis-Grounding-performance-when-using-a-better-object-detector"><a href="#Analysis-Grounding-performance-when-using-a-better-object-detector" class="headerlink" title="Analysis:  Grounding performance when using a better object detector."></a>Analysis:  Grounding performance when using a better object detector.</h3><ul><li>在 Flickr30k Entities 上进行实验，分析 better detector 对 grounding性能的影响</li><li>（1）使用 GT box (ubrealistically) ，进行实验，发现 caption metric 和 grounding accuracy都有提升</li><li>（2）在 Flickr30k上训练一个detector（之前使用的是在 visual genome上训练好的），进行实验，发现，使得caption metirc下降，（作者分析：由于在本数据集上进行训练，得到的 the ROI features and their associated object predictions 更偏向于 该数据中的  the annotated object words 却不能很好地泛化以预测 diverse captions， 从而导致了captioning 指标下降）</li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>[1] Abhishek Das, Harsh Agrawal, Larry Zitnick, Devi Parikh, and Dhruv Batra.  <strong>Human attention in visual question answering: Do humans and deep networks look at the same regions?</strong>  Computer Vision and Image Understanding, 163:90–100, 2017. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ICLR-2020-under-view&quot;&gt;&lt;a href=&quot;#ICLR-2020-under-view&quot; class=&quot;headerlink&quot; title=&quot;ICLR 2020 under view&quot;&gt;&lt;/a&gt;ICLR 2020 under view&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>vatex_challenge_solutions</title>
    <link href="http://yoursite.com/2019/10/20/vatex-challenge-solutions/"/>
    <id>http://yoursite.com/2019/10/20/vatex-challenge-solutions/</id>
    <published>2019-10-20T09:47:35.000Z</published>
    <updated>2019-10-23T09:11:10.234Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>pytorch 索引 切片</title>
    <link href="http://yoursite.com/2019/10/10/pytorch-%E7%B4%A2%E5%BC%95-%E5%88%87%E7%89%87/"/>
    <id>http://yoursite.com/2019/10/10/pytorch-索引-切片/</id>
    <published>2019-10-10T07:57:21.000Z</published>
    <updated>2019-10-10T08:06:42.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="给出：四维张量，三维的索引。根据索引得到张量中对应的数据"><a href="#给出：四维张量，三维的索引。根据索引得到张量中对应的数据" class="headerlink" title="给出：四维张量，三维的索引。根据索引得到张量中对应的数据"></a>给出：四维张量，三维的索引。根据索引得到张量中对应的数据</h2><ul><li><p>四维张量，object_feats.shape = [bs, 28, 5, 1024]。一个video中截取 28帧，每帧提取5个object, 其特征向量维度为1024</p></li><li><p>三维索引，traj_idx.shape = [bs, 28, 5]。以第一帧 frame上的 5个object 作为anchor，找到以该anchor 作为开头的轨迹（即，在其余帧上的对应的objects的索引），</p></li><li><p>目标：由索引，提取对应的 object feature</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traj_feats = object_feats.gather(<span class="number">2</span>, traj_idx.unsqueeze(<span class="number">3</span>).expand_as(object_feats))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;给出：四维张量，三维的索引。根据索引得到张量中对应的数据&quot;&gt;&lt;a href=&quot;#给出：四维张量，三维的索引。根据索引得到张量中对应的数据&quot; class=&quot;headerlink&quot; title=&quot;给出：四维张量，三维的索引。根据索引得到张量中对应的数据&quot;&gt;&lt;/a&gt;给出
      
    
    </summary>
    
      <category term="pytorch" scheme="http://yoursite.com/categories/pytorch/"/>
    
    
      <category term="pytorch" scheme="http://yoursite.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>使用 objects position 作为特征的论文</title>
    <link href="http://yoursite.com/2019/10/10/%E4%BD%BF%E7%94%A8-objects-position-%E4%BD%9C%E4%B8%BA%E7%89%B9%E5%BE%81%E7%9A%84%E8%AE%BA%E6%96%87/"/>
    <id>http://yoursite.com/2019/10/10/使用-objects-position-作为特征的论文/</id>
    <published>2019-10-10T02:10:41.000Z</published>
    <updated>2019-10-10T02:25:11.330Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>对分类损失的优化</title>
    <link href="http://yoursite.com/2019/09/23/%E5%AF%B9%E5%88%86%E7%B1%BB%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2019/09/23/对分类损失函数的优化/</id>
    <published>2019-09-23T14:13:58.000Z</published>
    <updated>2019-09-23T14:13:58.675Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>视频描述评价指标的分析</title>
    <link href="http://yoursite.com/2019/09/21/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%E7%9A%84%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/09/21/视频描述评价指标的分析/</id>
    <published>2019-09-21T08:50:01.000Z</published>
    <updated>2019-09-22T03:04:49.546Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>Neural Motifs: Scene Graph Parsing with Global Context</title>
    <link href="http://yoursite.com/2019/09/18/Neural-Motifs-Scene-Graph-Parsing-with-Global-Context/"/>
    <id>http://yoursite.com/2019/09/18/Neural-Motifs-Scene-Graph-Parsing-with-Global-Context/</id>
    <published>2019-09-18T06:41:36.000Z</published>
    <updated>2019-09-19T06:51:05.187Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><ul><li>给出了一个对 repeated structures 的量化分析</li><li>分析显示，（1）由object label对预测 relation label是有效的，但是反之却不成立。（2）在一个image graph中会出现重复的模板（eg：大象有耳朵，大象有鼻子，  XX has YY）</li></ul><h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><ul><li>给定 object feature 和 object label 来去预测 relation label</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给出了一个对 repeated structures 的量化分析
      
    
    </summary>
    
      <category term="场景图解析" scheme="http://yoursite.com/categories/%E5%9C%BA%E6%99%AF%E5%9B%BE%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="场景图解析" scheme="http://yoursite.com/tags/%E5%9C%BA%E6%99%AF%E5%9B%BE%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>video captioning 任务的难点？</title>
    <link href="http://yoursite.com/2019/09/07/video-captioning-%E4%BB%BB%E5%8A%A1%E7%9A%84%E9%9A%BE%E7%82%B9%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/09/07/video-captioning-任务的难点？/</id>
    <published>2019-09-07T06:59:20.000Z</published>
    <updated>2019-09-21T08:48:23.866Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Just can be seen by yaya.
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>视频描述任务中用到objects的论文总结</title>
    <link href="http://yoursite.com/2019/09/01/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0%E4%BB%BB%E5%8A%A1%E4%B8%AD%E7%94%A8%E5%88%B0objects%E7%9A%84%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/09/01/视频描述任务中用到objects的论文总结/</id>
    <published>2019-09-01T13:44:12.000Z</published>
    <updated>2019-09-02T14:25:17.670Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>CVPR 2018</p><ol><li>Fine-grained Video Captioning for Sports Narrative</li></ol></li><li><p>CVPR 2019</p><ol><li>Grounded Video Description</li><li>Object-aware Aggregation with Bidirectional Temporal Graph for Video Captioning</li><li>Spatio-Temporal Dynamics and Semantic Attribute Enriched Visual Encoding for Video Captioning 【再去读一遍】</li><li>Adversarial Inference for Multi-Sentence Video Description</li></ol></li><li><p>ACM 2019</p><ol><li>Hierarchical Global-Local Temporal Modeling for Video Captioning</li></ol></li></ul><h3 id="Grounded-Video-Description"><a href="#Grounded-Video-Description" class="headerlink" title="Grounded Video Description"></a>Grounded Video Description</h3><p><img src="https://i.loli.net/2019/09/02/Hvtk4BJVNQ2WwdM.png" alt="搜狗截图20190902104324.png"></p><ol><li><p>如何使用region feature？</p><p> 仅在language lstm 用到了 region featrue, attention 加权求和之后 与 cat[ fc, motion] features 对应元素相加（cat[fc, motion]也是在经过attention加权求和之后的）</p><p> 但我个人认为对应元素相加，并没有道理，相当于在 cat[ fc, motion] 的基础上增加了一个 bias，没有什么道理</p></li><li><p>region feature 的构成？</p><p>R：是 object detector  在 fc6 输出的 feature</p><p>Ms(R)：是 object detector 在 fc7 输出的feature (这里有一些细节的修改，具体见论文)</p><p>Ml： 是 position embedding</p></li></ol><p><img src="https://i.loli.net/2019/09/02/y4JkxlmLQpqaj5c.png" alt="搜狗截图20190902105022.png"></p><h3 id="Object-aware-Aggregation-with-Bidirectional-Temporal-Graph-for-Video-Captioning"><a href="#Object-aware-Aggregation-with-Bidirectional-Temporal-Graph-for-Video-Captioning" class="headerlink" title="Object-aware Aggregation with Bidirectional Temporal Graph for Video Captioning"></a>Object-aware Aggregation with Bidirectional Temporal Graph for Video Captioning</h3><p><img src="https://i.loli.net/2019/09/02/TIP7Ww3FnLNKzvu.png" alt="搜狗截图20190902144125.png"></p><ol><li><p>简要介绍本文的结构</p><p> 在encoder 部分，使用 object feature 和 frame feature，分别经过设计的VALD 得到更新的特征向量</p><p> 在 decoder 部分，对object feature 使用两层的attention, 先对 <strong>一个轨迹</strong>上的objects 进行attention 的加权求和，再对N different objects instances进行 attention 的加权求和，这样就可以得到对所有objects 的聚合表达</p><p> 轨迹：对于第一帧的ojects, 根据相似性分别去找其他帧与其对应的objects，而构成的时域轨迹。</p><p>  这里采用了前向轨迹，和后向轨迹两种，在decoder 输出预测的单词之后，进行融合。</p></li><li><p>如何使用region feature？<br> 仅有一个lstm ，在输入lstm前对objects features进行两层attention 加权求和后，与同样经过attention的frames feature进行加和（sum）。<br> 本文没有使用 motion feeture</p></li><li><p>region feature 的构成？<br> 非常简单，只有 appearance feature，但是经过了 obejct VLAD module！</p></li><li><p><font color="#0099ff" size="5" face="黑体">object feature 的 hierarchical attention 值得借鉴呢！<br>计算object 相似性的部分也不错</font></p></li></ol><h3 id="Spatio-Temporal-Dynamics-and-Semantic-Attribute-Enriched-Visual-Encoding-for-Video-Captioning"><a href="#Spatio-Temporal-Dynamics-and-Semantic-Attribute-Enriched-Visual-Encoding-for-Video-Captioning" class="headerlink" title="Spatio-Temporal Dynamics and Semantic Attribute Enriched Visual Encoding for Video Captioning"></a>Spatio-Temporal Dynamics and Semantic Attribute Enriched Visual Encoding for Video Captioning</h3><p><img src="https://i.loli.net/2019/09/02/T5AzpW8DHkVL2Oy.png" alt="搜狗截图20190902152617.png"></p><ul><li>此文没有太看懂</li></ul><ol><li><p>如何使用region feature？</p><p> 得到 obejcts sematics embeddding 一起其他三个信息，经过聚合之后得到特征向量v，再经过一个线性变换得到v，再送入decoder中</p></li><li><p>region feature 的构成？</p><p> 由 object detector 输出的特征，以及其他输出（objetcs 存现的频率、概率），来构建semantics</p></li></ol><h3 id="Hierarchical-Global-Local-Temporal-Modeling-for-Video-Captioning"><a href="#Hierarchical-Global-Local-Temporal-Modeling-for-Video-Captioning" class="headerlink" title="Hierarchical Global-Local Temporal Modeling for Video Captioning"></a>Hierarchical Global-Local Temporal Modeling for Video Captioning</h3><p><img src="https://i.loli.net/2019/09/02/m5xLQnzCJGsjWVc.png" alt="搜狗截图20190902161552.png"></p><ol><li><p>如何使用region features ?</p><p> encoder 部分由两层LSTM，第一层LSTM 构建 frames features 和 c3d features的 隐层状态，并送入第二层LSTM，</p><p>在第二层LSTM 的每一个step, 都对该step 对应帧上的 objetcs进行attention 加权求和，并送入LSTM中，得到该帧的objects 的聚合特征的隐层状态   </p><p> <img src="https://i.loli.net/2019/09/02/q6XNP8iSVzekyCE.png" alt="搜狗截图20190902165813.png"></p></li><li><p>region feature 的构成？</p><p>   每帧 objects features 的加权求和，再经过LSTM得到隐层状态</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>当前基于 objects feature 的论文，decoder 部分没有太大的新颖（一般都是Top-Down或者是 Soft-Attention），主要的新颖的地方是在 encoder 部分</li><li>encoder部分有的使用LSTM 以及attention 来更新 objects features；有的使用VLAD 来构建 行为特征，使用 objects 的时域轨迹和两层attention 来聚合特征；使用objetcs 的其他信息，比如 position 以及 label 等信息</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;CVPR 2018&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fine-grained Video Captioning for Sports Narrative&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CVPR 2019&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Grounde
      
    
    </summary>
    
      <category term="视频描述" scheme="http://yoursite.com/categories/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
    
      <category term="视频描述" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>目标检测模型中的性能评估——MAP(Mean Average Precision))</title>
    <link href="http://yoursite.com/2019/08/31/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E6%80%A7%E8%83%BD%E8%AF%84%E4%BC%B0%E2%80%94%E2%80%94MAP-Mean-Average-Precision/"/>
    <id>http://yoursite.com/2019/08/31/目标检测模型中的性能评估——MAP-Mean-Average-Precision/</id>
    <published>2019-08-31T01:41:03.000Z</published>
    <updated>2019-08-31T01:43:06.273Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/katherine_hsr/article/details/79266880" target="_blank" rel="noopener">https://blog.csdn.net/katherine_hsr/article/details/79266880</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/katherine_hsr/article/details/79266880&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/katherine_
      
    
    </summary>
    
      <category term="目标检测" scheme="http://yoursite.com/categories/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="目标检测" scheme="http://yoursite.com/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>多标签图像分类任务的评价方法-mAP</title>
    <link href="http://yoursite.com/2019/08/31/%E5%A4%9A%E6%A0%87%E7%AD%BE%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1%E7%9A%84%E8%AF%84%E4%BB%B7%E6%96%B9%E6%B3%95-mAP/"/>
    <id>http://yoursite.com/2019/08/31/多标签图像分类任务的评价方法-mAP/</id>
    <published>2019-08-31T00:44:47.000Z</published>
    <updated>2019-08-31T01:44:17.241Z</updated>
    
    <content type="html"><![CDATA[<p>转载 from: <a href="http://blog.sina.com.cn/s/blog_9db078090102whzw.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_9db078090102whzw.html</a></p><p>多标签图像分类（Multi-label   Image  Classification）任务中图片的标签不止一个，因此评价不能用普通单标签图像分类的标准，即mean  accuracy，该任务采用的是和信息检索中类似的方法—mAP（mean  Average  Precision）。mAP虽然字面意思和mean  accuracy看起来差不多，但是计算方法要繁琐得多，以下是mAP的计算方法：</p><p>首先用训练好的模型得到所有测试样本的confidence  score，每一类（如car）的confidence   score保存到一个文件中（如comp1_cls_test_car.txt）。假设共有20个测试样本，每个的id，confidence  score和ground  truth  label如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQd58yJ15f" target="_blank" rel="noopener"><img src="http://s16.sinaimg.cn/mw690/002T2ChPgy6XQd58yJ15f" alt="img"></a> </p><p>接下来对confidence  score排序，得到：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQd86isc4c" target="_blank" rel="noopener"><img src="http://s13.sinaimg.cn/mw690/002T2ChPgy6XQd86isc4c" alt="img"></a><em>这张表很重要，接下来的precision和recall都是依照这个表计算的</em>﻿</p><p>然后计算precision和recall，这两个标准的定义如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQdjij4Ae8" target="_blank" rel="noopener"><img src="http://s9.sinaimg.cn/mw690/002T2ChPgy6XQdjij4Ae8" alt="img"></a></p><p>上图比较直观，圆圈内（true   positives + false  positives）是我们选出的元素,它对应于分类任务中我们取出的结果，比如对测试样本在训练好的car模型上分类，我们想得到top-5的结果，即：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQdbTpla5c" target="_blank" rel="noopener"><img src="http://s13.sinaimg.cn/mw690/002T2ChPgy6XQdbTpla5c" alt="img"></a></p><p>在这个例子中，true   positives就是指第4和第2张图片，false   positives就是指第13，19，6张图片。方框内圆圈外的元素（false   negatives和true  negatives）是相对于方框内的元素而言，在这个例子中，是指confidence   score排在top-5之外的元素，即：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQdcMwKCea" target="_blank" rel="noopener"><img src="http://s11.sinaimg.cn/mw690/002T2ChPgy6XQdcMwKCea" alt="img"></a> </p><p>其中，false   negatives是指第9，16，7，20张图片，true   negatives是指第1,18,5,15,10,17,12,14,8,11,3张图片。</p><p>那么，这个例子中Precision=2/5=40%，意思是对于car这一类别，我们选定了5个样本，其中正确的有2个，即准确率为40%；Recall=2/6=30%，意思是在所有测试样本中，共有6个car，但是因为我们只召回了2个，所以召回率为30%。</p><p>实际多类别分类任务中，我们通常不满足只通过top-5来衡量一个模型的好坏，而是需要知道从top-1到top-N（N是所有测试样本个数，本文中为20）对应的precision和recall。显然随着我们选定的样本越来也多，recall一定会越来越高，而precision整体上会呈下降趋势。把recall当成横坐标，precision当成纵坐标，即可得到常用的precision-recall曲线。这个例子的precision-recall曲线如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPgy6XQddBz7ze9" target="_blank" rel="noopener"><img src="http://s10.sinaimg.cn/mw690/002T2ChPgy6XQddBz7ze9" alt="img"></a></p><p>接下来说说AP的计算，此处参考的是PASCAL  VOC  CHALLENGE的计算方法。首先设定一组阈值，[0, 0.1, 0.2, …, 1]。然后对于recall大于每一个阈值（比如recall&gt;0.3），我们都会得到一个对应的最大precision。这样，我们就计算出了11个precision。AP即为这11个precision的平均值。这种方法英文叫做11-point interpolated average precision。</p><p>当然PASCAL VOC CHALLENGE自2010年后就换了另一种计算方法。新的计算方法假设这N个样本中有M个正例，那么我们会得到M个recall值（1/M, 2/M, …, M/M）,对于每个recall值r，我们可以计算出对应（r’ &gt; r）的最大precision，然后对这M个precision值取平均即得到最后的AP值。计算方法如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPzy76AuWjHOp29" target="_blank" rel="noopener"><img src="http://s10.sinaimg.cn/mw690/002T2ChPzy76AuWjHOp29" alt="img"></a></p><p>相应的Precision-Recall曲线（这条曲线是单调递减的）如下：</p><p><a href="http://blog.photo.sina.com.cn/showpic.html#url=http://album.sina.com.cn/pic/002T2ChPzy76AuH9Z6010" target="_blank" rel="noopener"><img src="http://s1.sinaimg.cn/mw690/002T2ChPzy76AuH9Z6010" alt="img"></a></p><p>AP衡量的是学出来的模型在每个类别上的好坏，mAP衡量的是学出的模型在所有类别上的好坏，得到AP后mAP的计算就变得很简单了，就是取所有AP的平均值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载 from: &lt;a href=&quot;http://blog.sina.com.cn/s/blog_9db078090102whzw.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.sina.com.cn/s/blog_9db
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>到底ResNet在解决一个什么问题呢</title>
    <link href="http://yoursite.com/2019/08/17/%E5%88%B0%E5%BA%95ResNet%E5%9C%A8%E8%A7%A3%E5%86%B3%E4%B8%80%E4%B8%AA%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%E5%91%A2/"/>
    <id>http://yoursite.com/2019/08/17/到底ResNet在解决一个什么问题呢/</id>
    <published>2019-08-17T02:21:24.000Z</published>
    <updated>2019-08-17T08:17:14.288Z</updated>
    
    <content type="html"><![CDATA[<p>对知乎上回答的简单总结</p><hr><p><strong>一、引言：为什么会有ResNet？Why ResNet？</strong></p><ul><li><p>过拟合？<br>  不是！因为深层网络表现为训练误差和测试误差都比较高，所以不是过拟合</p></li><li><p>梯度消失？梯度爆炸？<br>  不是！因为已经使用了 batch normalization ，在很大程度上解决了梯度消失、爆炸的问题，（yaya：我个人认为对梯度消失问题有一定的帮助，毕竟梯度值为1）</p></li><li><p>深层网络退化的原因？</p><p>  由于非线性激活函数的存在，使得信息被丢失，而不能完整保留，所以，应该在网络中加入恒等映射</p></li></ul><p>*<em>二、关于resnet网络结构 【没看懂为什么要有两层】  *</em></p><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g62hrnrs6nj30h9048aax.jpg" alt></p><ul><li>yaya 分析：<br>一层：  relu(x +  w1 x)<br>两层：  relu(x +w2 relu(w1 x))</li></ul><p>​       既然非线性激活函数会把信息丢失，为什么不这样：relu(wx) + x ，因为这样是错误的，本身relu是需要放在输出后面，起到非线性的作用，但是这样，就不算作对输出的非线</p><p>*<em>三、更多的理解    *</em></p><p><img src="http://ww1.sinaimg.cn/large/006uWRWVly1g62hpvudvxj30iu0cc3zi.jpg" alt></p><hr><p>yaya 的总结/理解</p><ol><li>resnet 解决的不是过拟合的问题，因为过拟合的现象是，train loss 小，但是val loss大，但是当前深层网络的问题是train loss大，val loss也大</li><li>resnet 提供了一个梯度为1的反向传播，在一定程度上解决了梯度消失的问题</li><li>FPN中指出，不同深度的网络的结合可以结合不同的分辨率，但是当前resnet 只跨越了一种分辨率，因此，没能很好地利用这一特点，因此desnet便被提出来</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对知乎上回答的简单总结&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;一、引言：为什么会有ResNet？Why ResNet？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;过拟合？&lt;br&gt;  不是！因为深层网络表现为训练误差和测试误差都比较高，所以不是过拟合&lt;/p&gt;
&lt;/l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解Batch Normalization批标准化</title>
    <link href="http://yoursite.com/2019/08/15/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Batch-Normalization%E6%89%B9%E6%A0%87%E5%87%86%E5%8C%96/"/>
    <id>http://yoursite.com/2019/08/15/深入理解Batch-Normalization批标准化/</id>
    <published>2019-08-15T10:41:21.000Z</published>
    <updated>2019-08-15T10:43:29.239Z</updated>
    
    <content type="html"><![CDATA[<ul><li>转载 from：<a href="https://www.cnblogs.com/guoyaohua/p/8724433.html" target="_blank" rel="noopener">https://www.cnblogs.com/guoyaohua/p/8724433.html</a></li></ul><blockquote><p>这几天面试经常被问到BN层的原理，虽然回答上来了，但还是感觉答得不是很好，今天仔细研究了一下Batch Normalization的原理，以下为参考网上几篇文章总结得出。</p></blockquote><p>　　Batch Normalization作为最近一年来DL的重要成果，已经广泛被证明其有效性和重要性。虽然有些细节处理还解释不清其理论原因，但是实践证明好用才是真的好，别忘了DL从Hinton对深层网络做Pre-Train开始就是一个<strong>经验领先于理论分析</strong>的偏经验的一门学问。本文是对论文《Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift》的导读。</p><p>　　机器学习领域有个很重要的假设：<strong>IID独立同分布假设</strong>，就是假设训练数据和测试数据是满足相同分布的，这是通过训练数据获得的模型能够在测试集获得好的效果的一个基本保障。那BatchNorm的作用是什么呢？<strong>BatchNorm就是在深度神经网络训练过程中使得每一层神经网络的输入保持相同分布的。</strong></p><p>　　接下来一步一步的理解什么是BN。</p><p>　　为什么深度神经网络<strong>随着网络深度加深，训练起来越困难，收敛越来越慢？</strong>这是个在DL领域很接近本质的好问题。很多论文都是解决这个问题的，比如ReLU激活函数，再比如Residual Network，BN本质上也是解释并从某个不同的角度来解决这个问题的。</p><h2 id="一、“Internal-Covariate-Shift”问题"><a href="#一、“Internal-Covariate-Shift”问题" class="headerlink" title="一、“Internal Covariate Shift”问题"></a>一、“Internal Covariate Shift”问题</h2><p>　　从论文名字可以看出，BN是用来解决“Internal Covariate Shift”问题的，那么首先得理解什么是“Internal Covariate Shift”？</p><p>　　论文首先说明Mini-Batch SGD相对于One Example SGD的两个优势：梯度更新方向更准确；并行计算速度快；（为什么要说这些？因为BatchNorm是基于Mini-Batch SGD的，所以先夸下Mini-Batch SGD，当然也是大实话）；然后吐槽下SGD训练的缺点：超参数调起来很麻烦。（作者隐含意思是用BN就能解决很多SGD的缺点）</p><p>　　接着引入<strong>covariate shift的概念</strong>：<strong>如果ML系统实例集合&lt;X,Y&gt;中的输入值X的分布老是变，这不符合IID假设</strong>，网络模型很难<strong>稳定的学规律</strong>，这不得引入迁移学习才能搞定吗，我们的ML系统还得去学习怎么迎合这种分布变化啊。对于深度学习这种包含很多隐层的网络结构，在训练过程中，因为各层参数不停在变化，所以每个隐层都会面临covariate shift的问题，也就是<strong>在训练过程中，隐层的输入分布老是变来变去，这就是所谓的“Internal Covariate Shift”，Internal指的是深层网络的隐层，是发生在网络内部的事情，而不是covariate shift问题只发生在输入层。</strong></p><p>　　然后提出了BatchNorm的基本思想：能不能<strong>让每个隐层节点的激活输入分布固定下来呢</strong>？这样就避免了“Internal Covariate Shift”问题了。</p><p>　　BN不是凭空拍脑袋拍出来的好点子，它是有启发来源的：之前的研究表明如果在图像处理中对输入图像进行白化（Whiten）操作的话——所谓<strong>白化</strong>，<strong>就是对输入数据分布变换到0均值，单位方差的正态分布</strong>——那么神经网络会较快收敛，那么BN作者就开始推论了：图像是深度神经网络的输入层，做白化能加快收敛，那么其实对于深度网络来说，其中某个隐层的神经元是下一层的输入，意思是其实深度神经网络的每一个隐层都是输入层，不过是相对下一层来说而已，那么能不能对每个隐层都做白化呢？这就是启发BN产生的原初想法，而BN也确实就是这么做的，<strong>可以理解为对深层神经网络每个隐层神经元的激活值做简化版本的白化操作。</strong></p><h2 id="二、BatchNorm的本质思想"><a href="#二、BatchNorm的本质思想" class="headerlink" title="二、BatchNorm的本质思想"></a><strong>二、</strong>BatchNorm的本质思想</h2><p>　　BN的基本思想其实相当直观：因为深层神经网络在做非线性变换前的<strong>激活输入值</strong>（就是那个x=WU+B，U是输入）<strong>随着网络深度加深或者在训练过程中，其分布逐渐发生偏移或者变动，之所以训练收敛慢，一般是整体分布逐渐往非线性函数的取值区间的上下限两端靠近</strong>（对于Sigmoid函数来说，意味着激活输入值WU+B是大的负值或正值），所以这<strong>导致反向传播时低层神经网络的梯度消失</strong>，这是训练深层神经网络收敛越来越慢的<strong>本质原因</strong>，<strong>而BN就是通过一定的规范化手段，把每层神经网络任意神经元这个输入值的分布强行拉回到均值为0方差为1的标准正态分布</strong>，其实就是把越来越偏的分布强制拉回比较标准的分布，这样使得激活输入值落在非线性函数对输入比较敏感的区域，这样输入的小变化就会导致损失函数较大的变化，意思是<strong>这样让梯度变大，避免梯度消失问题产生，而且梯度变大意味着学习收敛速度快，能大大加快训练速度。</strong></p><p>　　THAT’S IT。其实一句话就是：<strong>对于每个隐层神经元，把逐渐向非线性函数映射后向取值区间极限饱和区靠拢的输入分布强制拉回到均值为0方差为1的比较标准的正态分布，使得非线性变换函数的输入值落入对输入比较敏感的区域，以此避免梯度消失问题。</strong>因为梯度一直都能保持比较大的状态，所以很明显对神经网络的参数调整效率比较高，就是变动大，就是说向损失函数最优值迈动的步子大，也就是说收敛地快。BN说到底就是这么个机制，方法很简单，道理很深刻。</p><p>　　上面说得还是显得抽象，下面更形象地表达下这种调整到底代表什么含义。</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405225246905-37854887.png" alt="img"></p><p>  图1  几个正态分布</p><p>　　假设某个隐层神经元原先的激活输入x取值符合正态分布，正态分布均值是-2，方差是0.5，对应上图中最左端的浅蓝色曲线，通过BN后转换为均值为0，方差是1的正态分布（对应上图中的深蓝色图形），意味着什么，意味着输入x的取值正态分布整体右移2（均值的变化），图形曲线更平缓了（方差增大的变化）。这个图的意思是，BN其实就是把每个隐层神经元的激活输入分布从偏离均值为0方差为1的正态分布通过平移均值压缩或者扩大曲线尖锐程度，调整为均值为0方差为1的正态分布。</p><p>　　那么把激活输入x调整到这个正态分布有什么用？首先我们看下均值为0，方差为1的标准正态分布代表什么含义：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405225314624-527885612.png" alt="img"></p><p>图2  均值为0方差为1的标准正态分布图</p><p>　　这意味着在一个标准差范围内，也就是说64%的概率x其值落在[-1,1]的范围内，在两个标准差范围内，也就是说95%的概率x其值落在了[-2,2]的范围内。那么这又意味着什么？我们知道，激活值x=WU+B,U是真正的输入，x是某个神经元的激活值，假设非线性函数是sigmoid，那么看下sigmoid(x)其图形：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143109455-1460017374.png" alt="img"></p><p>图3. Sigmoid(x)</p><p>及sigmoid(x)的导数为：G’=f(x)*(1-f(x))，因为f(x)=sigmoid(x)在0到1之间，所以G’在0到0.25之间，其对应的图如下：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142351924-124461667.png" alt="img"></p><p>图4  Sigmoid(x)导数图</p><p>　　假设没有经过BN调整前x的原先正态分布均值是-6，方差是1，那么意味着95%的值落在了[-8,-4]之间，那么对应的Sigmoid（x）函数的值明显接近于0，这是典型的梯度饱和区，在这个区域里梯度变化很慢，为什么是梯度饱和区？请看下sigmoid(x)如果取值接近0或者接近于1的时候对应导数函数取值，接近于0，意味着梯度变化很小甚至消失。而假设经过BN后，均值是0，方差是1，那么意味着95%的x值落在了[-2,2]区间内，很明显这一段是sigmoid(x)函数接近于线性变换的区域，意味着x的小变化会导致非线性函数值较大的变化，也即是梯度变化较大，对应导数函数图中明显大于0的区域，就是梯度非饱和区。</p><p>　　从上面几个图应该看出来BN在干什么了吧？其实就是把隐层神经元激活输入x=WU+B从变化不拘一格的正态分布通过BN操作拉回到了均值为0，方差为1的正态分布，即原始正态分布中心左移或者右移到以0为均值，拉伸或者缩减形态形成以1为方差的图形。什么意思？就是说<strong>经过BN后，目前大部分Activation的值落入非线性函数的线性区内，其对应的导数远离导数饱和区，这样来加速训练收敛过程。</strong></p><p>　　但是很明显，看到这里，稍微了解神经网络的读者一般会提出一个疑问：如果都通过BN，那么不就跟把非线性函数替换成线性函数效果相同了？这意味着什么？我们知道，如果是多层的线性函数变换其实这个深层是没有意义的，因为多层线性网络跟一层线性网络是等价的。这意味着网络的<strong>表达能力</strong>下降了，这也意味着深度的意义就没有了。<strong>所以BN为了保证非线性的获得，对变换后的满足均值为0方差为1的x又进行了scale加上shift操作(y=scale*x+shift)</strong>，每个神经元增加了两个参数scale和shift参数，这两个参数是通过训练学习到的，意思是通过scale和shift把这个值从标准正态分布左移或者右移一点并长胖一点或者变瘦一点，每个实例挪动的程度不一样，这样等价于非线性函数的值从正中心周围的线性区往非线性区动了动。核心思想应该是想找到一个线性和非线性的较好平衡点，既能享受非线性的较强表达能力的好处，又避免太靠非线性区两头使得网络收敛速度太慢。当然，这是我的理解，论文作者并未明确这样说。但是很明显这里的scale和shift操作是会有争议的，因为按照论文作者论文里写的理想状态，就会又通过scale和shift操作把变换后的x调整回未变换的状态，那不是饶了一圈又绕回去原始的“Internal Covariate Shift”问题里去了吗，感觉论文作者并未能够清楚地解释scale和shift操作的理论原因。</p><h2 id="三、训练阶段如何做BatchNorm"><a href="#三、训练阶段如何做BatchNorm" class="headerlink" title="三、训练阶段如何做BatchNorm"></a>三、训练阶段如何做BatchNorm</h2><p>　　上面是对BN的抽象分析和解释，具体在Mini-Batch SGD下做BN怎么做？其实论文里面这块写得很清楚也容易理解。为了保证这篇文章完整性，这里简单说明下。</p><p>　　假设对于一个深层神经网络来说，其中两层结构如下：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405213859690-1933561230.png" alt="img"></p><p>  图5  DNN其中两层</p><p>　　要对每个隐层神经元的激活值做BN，可以想象成每个隐层又加上了一层BN操作层，它位于X=WU+B激活值获得之后，非线性函数变换之前，其图示如下：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180405213955224-1791925244.png" alt="img"></p><p>  图6. BN操作</p><p>　　对于Mini-Batch SGD来说，一次训练过程里面包含m个训练实例，其具体BN操作就是对于隐层内每个神经元的激活值来说，进行如下变换：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142802238-1209499294.png" alt="img"></p><p>　　要注意，这里t层某个神经元的x(k)不是指原始输入，就是说不是t-1层每个神经元的输出，而是t层这个神经元的线性激活x=WU+B，这里的U才是t-1层神经元的输出。变换的意思是：某个神经元对应的原始的激活x通过减去mini-Batch内m个实例获得的m个激活x求得的均值E(x)并除以求得的方差Var(x)来进行转换。</p><p>　　上文说过经过这个<strong>变换后某个神经元的激活x形成了均值为0，方差为1的正态分布，目的是把值往后续要进行的非线性变换的线性区拉动，增大导数值，增强反向传播信息流动性，加快训练收敛速度。**</strong>但是这样会导致网络表达能力下降，为了防止这一点，每个神经元增加两个调节参数（scale和shift），这两个参数是通过训练来学习到的，用来对变换后的激活反变换，使得网络表达能力增强，即对变换后的激活进行如下的scale和shift操作，这其实是变换的反操作：**</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142923190-79595046.png" alt="img"></p><p>　　BN其具体操作流程，如论文中描述的一样：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407142956288-903484055.png" alt="img"></p><p>　　过程非常清楚，就是上述公式的流程化描述，这里不解释了，直接应该能看懂。</p><h2 id="四、BatchNorm的推理-Inference-过程"><a href="#四、BatchNorm的推理-Inference-过程" class="headerlink" title="四、BatchNorm的推理(Inference)过程"></a>四、BatchNorm的推理(Inference)过程</h2><p>　　BN在训练的时候可以根据Mini-Batch里的若干训练实例进行激活数值调整，但是在推理（inference）的过程中，很明显输入就只有一个实例，看不到Mini-Batch其它实例，那么这时候怎么对输入做BN呢？因为很明显一个实例是没法算实例集合求出的均值和方差的。这可如何是好？</p><p>　　既然没有从Mini-Batch数据里可以得到的统计量，那就想其它办法来获得这个统计量，就是均值和方差。可以用从所有训练实例中获得的统计量来代替Mini-Batch里面m个训练实例获得的均值和方差统计量，因为本来就打算用全局的统计量，只是因为计算量等太大所以才会用Mini-Batch这种简化方式的，那么在推理的时候直接用全局统计量即可。</p><p>　　决定了获得统计量的数据范围，那么接下来的问题是如何获得均值和方差的问题。很简单，因为每次做Mini-Batch训练时，都会有那个Mini-Batch里m个训练实例获得的均值和方差，现在要全局统计量，只要把每个Mini-Batch的均值和方差统计量记住，然后对这些均值和方差求其对应的数学期望即可得出全局统计量，即：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143405654-1995556833.png" alt="img"></p><p>　　有了均值和方差，每个隐层神经元也已经有对应训练好的Scaling参数和Shift参数，就可以在推导的时候对每个神经元的激活数据计算NB进行变换了，在推理过程中进行BN采取如下方式：</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143658338-63450857.png" alt="img"></p><p>　　这个公式其实和训练时</p><p><img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407143807788-1841864822.png" alt="img"></p><p>　　是等价的，通过简单的合并计算推导就可以得出这个结论。那么为啥要写成这个变换形式呢？我猜作者这么写的意思是：在实际运行的时候，按照这种变体形式可以减少计算量，为啥呢？因为对于每个隐层节点来说：</p><p>　　　　　　　　<img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407144519480-1024698421.png" alt="img">　　<img src="https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180407144549010-487189588.png" alt="img"></p><p>　　都是固定值，这样这两个值可以事先算好存起来，在推理的时候直接用就行了，这样比原始的公式每一步骤都现算少了除法的运算过程，乍一看也没少多少计算量，但是如果隐层节点个数多的话节省的计算量就比较多了。</p><h2 id="五、BatchNorm的好处"><a href="#五、BatchNorm的好处" class="headerlink" title="五、BatchNorm的好处"></a>五、BatchNorm的好处</h2><p>　　BatchNorm为什么NB呢，关键还是效果好。<strong>①**</strong>不仅仅极大提升了训练速度，收敛过程大大加快；②还能增加分类效果，一种解释是这是类似于Dropout的一种防止过拟合的正则化表达方式，所以不用Dropout也能达到相当的效果；③另外调参过程也简单多了，对于初始化要求没那么高，而且可以使用大的学习率等。**总而言之，经过这么简单的变换，带来的好处多得很，这也是为何现在BN这么快流行起来的原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;转载 from：&lt;a href=&quot;https://www.cnblogs.com/guoyaohua/p/8724433.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/guoyaohua
      
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>linux 文件名中有空格、括号 时如何操作</title>
    <link href="http://yoursite.com/2019/08/14/linux-%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%AD%E6%9C%89%E7%A9%BA%E6%A0%BC%E3%80%81%E6%8B%AC%E5%8F%B7-%E6%97%B6%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/08/14/linux-文件名中有空格、括号-时如何操作/</id>
    <published>2019-08-14T08:22:53.000Z</published>
    <updated>2019-08-14T08:25:27.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何处理-cd-cp"><a href="#如何处理-cd-cp" class="headerlink" title="如何处理 cd cp"></a>如何处理 <code>cd</code> <code>cp</code></h3><ul><li><p>将文件名用<strong>双引号</strong> 包起来</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd = 'cp -r <span class="string">"&#123;&#125;"</span> <span class="string">"&#123;&#125;"</span>'.format(source_path, target_path)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何处理-cd-cp&quot;&gt;&lt;a href=&quot;#如何处理-cd-cp&quot; class=&quot;headerlink&quot; title=&quot;如何处理 cd cp&quot;&gt;&lt;/a&gt;如何处理 &lt;code&gt;cd&lt;/code&gt; &lt;code&gt;cp&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将文件
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python 3.3.3 字面量,正则,反斜杠和原始字符串</title>
    <link href="http://yoursite.com/2019/08/14/python-3-3-3-%E5%AD%97%E9%9D%A2%E9%87%8F-%E6%AD%A3%E5%88%99-%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%92%8C%E5%8E%9F%E5%A7%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2019/08/14/python-3-3-3-字面量-正则-反斜杠和原始字符串/</id>
    <published>2019-08-14T06:59:02.000Z</published>
    <updated>2019-08-14T07:00:06.680Z</updated>
    
    <content type="html"><![CDATA[<ul><li>注明：转载 from <a href="https://www.cnblogs.com/xiangnan/p/3446904.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiangnan/p/3446904.html</a></li></ul><h1 id="两个不起眼但是比较重要的设定"><a href="#两个不起眼但是比较重要的设定" class="headerlink" title="两个不起眼但是比较重要的设定"></a>两个不起眼但是比较重要的设定</h1><ul><li>Python str类型的字面量解释器</li></ul><p>当反斜杠及其紧接字符无法构成一个具有特殊含义的序列(‘recognized escape sequences’)时,Python选择保留全部字符.直接看例子:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\c'</span></span><br><span class="line"><span class="string">'\\c'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\d'</span></span><br><span class="line"><span class="string">'\\d'</span></span><br></pre></td></tr></table></figure><p>官方管’\c’这种序列叫’unrecognized escape sequences’.官方文档相应部分:</p><p>Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., <em>the backslash is left in the string</em>. (This behavior is useful when debugging: if an escape sequence is mistyped, the resulting output is more easily recognized as broken.) </p><p>按这段英文的意思,估计C语言里面,’c’和’\c’是等同的.Python是’\c’和’\c’等同.这个等以后学C语言再确定.</p><p>与上面对应的是,如果紧接字符能够和反斜杠构成’recognized escape sequences’的<strong>全部</strong>或者<strong>起始部分</strong>,中文就叫’被承认的转义序列’吧.比如:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\b'</span></span><br><span class="line"><span class="string">'\x08'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\n'</span></span><br><span class="line"><span class="string">'\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\x'</span></span><br><span class="line"><span class="symbol">SyntaxError:</span> (unicode error) <span class="string">'unicodeescape'</span> codec can<span class="string">'t decode bytes in position 0-1: truncated \xXX escape</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; '</span>\N<span class="string">'</span></span><br><span class="line"><span class="string">SyntaxError: (unicode error) '</span>unicodeescape<span class="string">' codec can'</span>t decode bytes <span class="keyword">in</span> position <span class="number">0</span>-<span class="number">1</span>: malformed \N character escape</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\U'</span></span><br><span class="line"><span class="symbol">SyntaxError:</span> (unicode error) <span class="string">'unicodeescape'</span> codec can<span class="string">'t decode bytes in position 0-1: truncated \UXXXXXXXX escape</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; '</span>\u<span class="string">'</span></span><br><span class="line"><span class="string">SyntaxError: (unicode error) '</span>unicodeescape<span class="string">' codec can'</span>t decode bytes <span class="keyword">in</span> position <span class="number">0</span>-<span class="number">1</span>: truncated \uXXXX escape</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><ul><li>Python re模块正则表达式解释器</li></ul><p>当反斜杠及其紧接字符无法构成一个具有特殊含义的序列(special sequences)时,re选择忽略反斜杠,例如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\e'</span>,<span class="string">'eee'</span>)</span><br><span class="line">[<span class="string">'e'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'e'</span>,<span class="string">'eee'</span>)</span><br><span class="line">[<span class="string">'e'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>]</span><br></pre></td></tr></table></figure><p>可见,’\e’和’e’起到了完全一样的效果.Python相关文档描述是:</p><p>If the ordinary character is not on the list, then the resulting RE will match the second character. For example, <code>\$</code> matches the character <code>&#39;$&#39;</code>.</p><p>与上面对应的是,如果能够构成special sequences,那么re会解释为相应含义.例如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\w'</span>,<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br></pre></td></tr></table></figure><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><p>字面量(Literals),是用于表示一些Python内建类型的常量的符号.最常见的字面量类型是str literals 和 bytes literals.</p><p>比如:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span></span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"abc"</span></span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'啊哦额'</span></span><br><span class="line"><span class="string">'啊哦额'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'abc'</span></span><br><span class="line"><span class="string">b'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">r'\n'</span></span><br><span class="line"><span class="string">'\\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'啊哦额'</span></span><br><span class="line">SyntaxError: bytes can only contain ASCII literal characters.</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>反斜杠\的用途按紧接其后的字符种类可划分为3类:</p><p>1.将特殊字符转换为字面量.这特殊字符包括(单引号,双引号,反斜杠):’”\</p><p>2.将普通字符转换为特殊序列.包括:abfNnrtuUvx0123456789.</p><p>(注意,bytes字面量中,NuU这三个普通字符无法被转义成特殊序列)</p><p>3.将”新行”和自身忽略掉.这个比较抽象,举例说明:py文件中,某个字符串太长了,以至于需要分两行写,那么你可以插个反斜杠,紧接着换行,然后写剩余字符串.</p><p>下面是官方文档归纳的表:</p><table><thead><tr><th>Escape Sequence</th><th>Meaning</th><th>Notes</th></tr></thead><tbody><tr><td><code>\newline</code></td><td>Backslash and newline ignored</td><td></td></tr><tr><td><code>\\</code></td><td>Backslash (<code>\</code>)</td><td></td></tr><tr><td><code>\&#39;</code></td><td>Single quote (<code>&#39;</code>)</td><td></td></tr><tr><td><code>\&quot;</code></td><td>Double quote (<code>&quot;</code>)</td><td></td></tr><tr><td><code>\a</code></td><td>ASCII Bell (BEL)</td><td></td></tr><tr><td><code>\b</code></td><td>ASCII Backspace (BS)</td><td></td></tr><tr><td><code>\f</code></td><td>ASCII Formfeed (FF)</td><td></td></tr><tr><td><code>\n</code></td><td>ASCII Linefeed (LF)</td><td></td></tr><tr><td><code>\r</code></td><td>ASCII Carriage Return (CR)</td><td></td></tr><tr><td><code>\t</code></td><td>ASCII Horizontal Tab (TAB)</td><td></td></tr><tr><td><code>\v</code></td><td>ASCII Vertical Tab (VT)</td><td></td></tr><tr><td><code>\ooo</code></td><td>Character with octal value <em>ooo</em></td><td>(1,3)</td></tr><tr><td><code>\xhh</code></td><td>Character with hex value <em>hh</em></td><td>(2,3)</td></tr></tbody></table><p>Escape sequences only recognized in string literals are:</p><table><thead><tr><th>Escape Sequence</th><th>Meaning</th><th>Notes</th></tr></thead><tbody><tr><td><code>\N{name}</code></td><td>Character named <em>name</em> in the Unicode database</td><td>(4)</td></tr><tr><td><code>\uxxxx</code></td><td>Character with 16-bit hex value <em>xxxx</em></td><td>(5)</td></tr><tr><td><code>\Uxxxxxxxx</code></td><td>Character with 32-bit hex value <em>xxxxxxxx</em></td><td>(6)</td></tr></tbody></table><p>举例:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\N&#123;END OF LINE&#125;'</span></span><br><span class="line"><span class="string">'\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\N&#123;HORIZONTAL TABULATION&#125;'</span></span><br><span class="line"><span class="string">'\t'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\u9f6a'</span>==<span class="string">'齪'</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\1'</span>==<span class="string">'\01'</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\1'</span>==<span class="string">'\001'</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'\1'</span>==<span class="string">'\0000001'</span></span><br><span class="line">False</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><ul><li>正则表达式的反斜杠的作用</li></ul><p>一种是使紧跟在后面的元字符(special characters或metacharacters)失去特殊含义,变为字面量.这些元字符有14个:</p><p>.^$*+?{}<a href></a>|</p><p>另一种是使紧跟在后面的普通字符变得具有特殊含义.这些普通字符是:</p><p>AbBdDsSwWZ0123456789</p><p>以及在str字面量中能被反斜杠转义的字符:</p><p>&#39;“abfnrtuUvx0123456789</p><p>例如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\"'</span>,<span class="string">'"'</span>)</span><br><span class="line">[<span class="string">'"'</span>]</span><br></pre></td></tr></table></figure><p>正则pattern的反斜杠的作用和Python字面量的反斜杠类似,这据说是带来”反斜杠灾难”的根源.最典型的莫过于你需要用正则’\\‘才能匹配字面量反斜杠’\‘.</p><p>为方便说明,我们假设re.search(pattern,string)中,pattern表示正则表达式字符串,string表示待匹配的字符串.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; re.search(<span class="string">'\\\\'</span>,<span class="string">'\\'</span>)</span><br><span class="line">&lt;_sre<span class="selector-class">.SRE_Match</span> <span class="selector-tag">object</span> at <span class="number">0</span>x02858528&gt;</span><br></pre></td></tr></table></figure><p>详细来说就是一个文本层级的反斜杠’&#39;(比如你在txt文件中看到的反斜杠),对应Python str 字面量的’\‘,对应正则pattern的’\\‘.这个确实比较难以理解,实在不行就住这点就好:<strong>如果不是最简单的正则类型(比如’ab’),强烈推荐对pattern使用r前缀符</strong>.这样容易理解:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.search(<span class="string">r'\\'</span>,<span class="string">'\\'</span>)</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x02858448</span>&gt;</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>1.多重含义的特殊序列处理机制</li></ul><p>b0123456789比较特殊,它们在Python字面量和re正则中都能和反斜杠构成作用不同的特殊序列.例如\b,在python 字面量中解释为”退格键”.re正则中解释为’单词边界’.<strong>python 字面量有优先解释权</strong>,如下可证:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\b'</span>,<span class="string">'\b'</span>)  <span class="comment">#'\b'被优先解释为退格键,而不是单词边界</span></span><br><span class="line">[<span class="string">'\x08'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b'</span>,<span class="string">'\b'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b'</span>,<span class="string">'b'</span>) </span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>]</span><br></pre></td></tr></table></figure><p>再比如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'(a)\1\1'</span>,<span class="string">'aaa'</span>) <span class="comment">#\1按字面量优先解释为八进制字符串,因此无匹配结果</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'(a)\\1\\1'</span>,<span class="string">'aaa'</span>)  <span class="comment">#\\1按正则引擎层级的反斜杠解释为第一个匹配组提取到的字符,相当于'(a)aa'</span></span><br><span class="line">[<span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'a\1\1'</span>,<span class="string">'a\1\1'</span>) <span class="comment">#\1按字面量优先解释为八进制字符串,所以有匹配结果</span></span><br><span class="line">[<span class="string">'a\x01\x01'</span>]</span><br></pre></td></tr></table></figure><p>了解这个设置有什么用?</p><p>1.当你想使用正则层级的特殊序列\1时,如果你没有使用r作为前缀,那么你必须使用\1才能如愿.</p><p>2.当你想使用字面量层级的特殊序列\1时,则不能使用r作为pattern前缀.</p><p>想想,你有可能在一个r前缀的字符串中写出能够匹配值为1的八进制字符串的pattern吗?</p><p>也许我太较真了,因为实践中好像从没遇到过需要匹配值为1的八进制字符串的情况,但理论上就是这样的.</p><ul><li><strong>2.正则表达式中特殊序列的准确定义的猜想</strong></li></ul><p>官方文档下面的一句话值得推敲:</p><p>Note that <code>\b</code> is used to represent word boundaries, and means “backspace” only inside character classes</p><p>意思是说\b只有在[…]里面时才表示退格键,这显然是错的.比如下面这个例子,\b没有在[]之内,但它是按”退格键”解释的,并非”单词边界”:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\b'</span>,<span class="string">'\b'</span>)</span><br><span class="line">[<span class="string">'\x08'</span>]</span><br></pre></td></tr></table></figure><p>除非官方文档描述的\b是指文本层面的数据(比如你在txt文档里看到的\b).</p><p>由此引出了一个猜想,re的正则pattern中”反斜杠+普通字符”构成特殊序列或”反斜杠+特殊字符”构成字面量–这种描述中的反斜杠准确来说是指两个反斜杠!</p><p>仍然是举例说明:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b\w+\\b'</span>,<span class="string">'one two three'</span>)  <span class="comment">#必须用\\b才能表示单词边界</span></span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b\\w+\\b'</span>,<span class="string">'one two three'</span>)  <span class="comment">#想想,为什么\w和\\w都一样</span></span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\d'</span>,<span class="string">'123'</span>)</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\d'</span>,<span class="string">'123'</span>)</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><ul><li>3.u和U只在str字面量中才能被转义,bytes字面量中是普通字符.</li></ul><p>以下是我猜测的正则表达式分析器和Python字面量分析器的传递规则表格:</p><table><thead><tr><th>Python string literal</th><th>values passed to regular expression</th><th>number of characters</th><th>what regular expression engine does</th><th>real meaning for regular expression</th></tr></thead><tbody><tr><td>\e</td><td>\e</td><td>2</td><td>ignore the backslash</td><td>e</td></tr><tr><td>\e</td><td>\e</td><td>2</td><td>ignore the backslash</td><td>e</td></tr><tr><td>e</td><td>e</td><td>1</td><td>nothing spacial</td><td>e</td></tr><tr><td>\n</td><td>\n</td><td>1</td><td>nothing spacial</td><td>换行符</td></tr><tr><td>\n</td><td>\n</td><td>2</td><td>\n is special</td><td>换行符</td></tr><tr><td>\b</td><td>\b</td><td>1</td><td>nothing spacial</td><td>退格键</td></tr><tr><td>\b</td><td>\b</td><td>2</td><td>\b is special</td><td>word boundary</td></tr><tr><td>\s</td><td>\s</td><td>2</td><td>\s is special</td><td>Unicode whitespace characters</td></tr><tr><td>\</td><td>\</td><td>1</td><td>must followed by a charcter</td><td>Can’t form any meaning</td></tr><tr><td>\\</td><td>\</td><td>2</td><td>remove all special meanning of \</td><td>\</td></tr><tr><td>*</td><td>*</td><td>1</td><td>* is special</td><td>repeat the left characters 0 or more times</td></tr><tr><td>*</td><td>*</td><td>2</td><td>remove all special meanning of *</td><td>*</td></tr></tbody></table><p>最后是待探究的例子:</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\\n'</span>,<span class="string">'\n\n'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[<span class="string">'\x08'</span>, <span class="string">'\x08'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[<span class="string">'\x08'</span>, <span class="string">'\x08'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\\b'</span>,<span class="string">'\b\b'</span>)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'c'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'c'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'\\c'</span>, <span class="string">'\\c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; re.findall(<span class="string">'\\\\c'</span>,<span class="string">'\c\c'</span>)</span><br><span class="line">[<span class="string">'\\c'</span>, <span class="string">'\\c'</span>]</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>参考:</p><p>Python 3.3.3 官方文档</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;注明：转载 from &lt;a href=&quot;https://www.cnblogs.com/xiangnan/p/3446904.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/xiangna
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>glob 之 **</title>
    <link href="http://yoursite.com/2019/08/13/glob-%E4%B9%8B/"/>
    <id>http://yoursite.com/2019/08/13/glob-之/</id>
    <published>2019-08-13T06:25:21.000Z</published>
    <updated>2019-08-14T02:07:02.733Z</updated>
    
    <content type="html"><![CDATA[<ul><li>该篇主要介绍glob的一些使用小技巧</li></ul><h3 id="想要获得某个文件目录下所有-指定文件格式-的所有文件"><a href="#想要获得某个文件目录下所有-指定文件格式-的所有文件" class="headerlink" title="想要获得某个文件目录下所有 指定文件格式 的所有文件"></a>想要获得某个文件目录下所有 <strong><em>指定文件格式</em></strong> 的所有文件</h3><ul><li><p>假设有一个文件环境如下图所示</p><p><img src="https://i.loli.net/2019/08/14/sjTANPfDuV6cord.png" alt="搜狗截图20190814100532.png"></p></li></ul><ul><li><p>比如想要获得<code>/userhome/dataset/MSVD/YouTubeClips/YouTubeClips</code> 下 <code>.avi</code>格式的所有文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span> = <span class="string">'/userhome/dataset/MSVD/YouTubeClips/YouTubeClips/'</span></span><br><span class="line">glob.glob(<span class="built_in">path</span> + <span class="string">'*.avi'</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>想要获得某目录下的所有子目录中的所有指定文件格式的所有文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span> = <span class="string">'/userhome/dataset/MSVD/YouTubeClips/'</span></span><br><span class="line">glob.glob(<span class="built_in">path</span> + <span class="string">'**/'</span> + <span class="string">'*.avi'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">path</span> = <span class="string">'/userhome/dataset/MSVD/'</span></span><br><span class="line">glob.glob(<span class="built_in">path</span> + <span class="string">'**/'</span> + <span class="string">'**/'</span> + <span class="string">'*.avi'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;该篇主要介绍glob的一些使用小技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;想要获得某个文件目录下所有-指定文件格式-的所有文件&quot;&gt;&lt;a href=&quot;#想要获得某个文件目录下所有-指定文件格式-的所有文件&quot; class=&quot;headerlink&quot; title=&quot;想
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title> pytorch clone() vs copy_()</title>
    <link href="http://yoursite.com/2019/08/06/pytorch-clone-vs-copy/"/>
    <id>http://yoursite.com/2019/08/06/pytorch-clone-vs-copy/</id>
    <published>2019-08-06T07:05:25.000Z</published>
    <updated>2019-08-06T07:06:02.565Z</updated>
    
    <content type="html"><![CDATA[<p><code>clone</code>() → Tensor</p><ul><li>反向传播时，将会返回到原来的变量上<br>Returns a copy of the <code>self</code> tensor. The copy has the same size and data type as <code>self</code>.</li><li>NOTE</li><li>Unlike copy_(), this function is recorded in the computation graph. Gradients propagating to the cloned tensor will propagate to the original tensor.</li></ul><hr><p><code>copy_</code>(<em>src</em>, <em>non_blocking=False</em>) → Tensor</p><ul><li><p>只是值得复制<br>Copies the elements from <code>src</code> into <code>self</code> tensor and returns <code>self</code>.</p></li><li><p>The <code>src</code> tensor must be <a href="https://pytorch.org/docs/stable/notes/broadcasting.html#broadcasting-semantics" target="_blank" rel="noopener">broadcastable</a> with the <code>self</code> tensor. It may be of a different data type or reside on a different device.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;clone&lt;/code&gt;() → Tensor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反向传播时，将会返回到原来的变量上&lt;br&gt;Returns a copy of the &lt;code&gt;self&lt;/code&gt; tensor. The copy has the same siz
      
    
    </summary>
    
      <category term="pytorch" scheme="http://yoursite.com/categories/pytorch/"/>
    
    
      <category term="pytorch" scheme="http://yoursite.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>实验中遇到的问题及解决</title>
    <link href="http://yoursite.com/2019/08/05/%E5%AE%9E%E9%AA%8C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2019/08/05/实验中遇到的问题及解决/</id>
    <published>2019-08-05T11:22:00.000Z</published>
    <updated>2019-08-05T11:41:45.360Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h3><ul><li>问题描述：首先表现为：在pycharm debug下和在running模式下的实验结果不一致，<br><br>后来，在训练阶段将预训练的模型保存下来，载入evaluate.py 文件中再次进行评估，得到的分数与在训练阶段评估的分数不一致</li><li>解决思路：由于第二个现象，更加容易解决，因此先解决他，师兄提出一个办法，将保存的模型再次载入，这样就可以有两个网络，然后比较两个网络的数据是在哪里出现差异的，这样可以找到问题。</li><li>解决办法：</li></ul><ol><li>在训练一个epoch 后，将模型保存了下来，然后用两个网络，一个时train.py中重新加载这个网络，一个是在evaluate.py中加载这个网络，将得到的结果，进行比较，（看输出的结果是否一致），然后发现，在一些video 输出的结果是一样的，在一些video是不一样的。<br></li><li>找到那些video对应的结果不一样的所对应的iteration，在该iteration打印出了网络中的部分变量的数据，发现，在dataloader的数据就是不一样的.<br></li><li>那么问题就是出现在数据加载上。通过对数据加载部分的代码进行调试，发现，仅在num_workers=0时，两个dataloader的数据才一样，而采用多线程的话，两个dataloader的数据不完全一样。而又在其他的代码上测试，多线程不会影响数据加载，那么问题就是出现在，自己设计的dataset上，<br></li><li>又发现在加载h5py文件时，没有取切片，而self.critical pytorch代码时加上了的，通过加上切片 <code>[:]</code> 发现在多线程时，是正常的。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题-1&quot;&gt;&lt;a href=&quot;#问题-1&quot; class=&quot;headerlink&quot; title=&quot;问题 1&quot;&gt;&lt;/a&gt;问题 1&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;问题描述：首先表现为：在pycharm debug下和在running模式下的实验结果不一致，&lt;br&gt;&lt;br&gt;后
      
    
    </summary>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="问题总结" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
